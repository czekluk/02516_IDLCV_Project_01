[
    {
        "model_name": "CNNWithBatchNorm",
        "model": "CNNWithBatchNorm(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6018563751831949,
            0.6570591108939912,
            0.6795310210063508,
            0.6922325354176844,
            0.6853932584269663,
            0.7244748412310699,
            0.7591597459697118,
            0.7616023448949683,
            0.7225207620908647,
            0.7454811919882756
        ],
        "test_acc": [
            0.48281417830290013,
            0.4940923737916219,
            0.4881847475832438,
            0.5472610096670247,
            0.514500537056928,
            0.5032223415682062,
            0.7121374865735768,
            0.5193340494092373,
            0.6197636949516648,
            0.5510204081632653
        ],
        "train_loss": [
            4.134029693901539,
            1.1634324863553047,
            0.9300163965672255,
            0.9479739554226398,
            1.1707160137593746,
            0.8594586178660393,
            0.5918437531217933,
            0.617421898059547,
            0.7648663725703955,
            0.7682421784847975
        ],
        "test_loss": [
            1.8224458434308568,
            1.1518883042037487,
            0.9701913540561994,
            0.7042225748300552,
            0.8328791548808415,
            0.7739693090319634,
            0.5976578603188197,
            2.4162365436709177,
            0.6567876110474269,
            0.7158989290396373
        ],
        "epochs": 10,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.0001
            }
        }
    },
    {
        "model_name": "FrozenPretrainedVGG",
        "model": "FrozenPretrainedVGG(\n  (model): VGG(\n    (features): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (9): ReLU(inplace=True)\n      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (12): ReLU(inplace=True)\n      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (16): ReLU(inplace=True)\n      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (19): ReLU(inplace=True)\n      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (22): ReLU(inplace=True)\n      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (26): ReLU(inplace=True)\n      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (29): ReLU(inplace=True)\n      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (32): ReLU(inplace=True)\n      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (36): ReLU(inplace=True)\n      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (39): ReLU(inplace=True)\n      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (42): ReLU(inplace=True)\n      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))\n    (classifier): Sequential(\n      (0): Linear(in_features=25088, out_features=4096, bias=True)\n      (1): ReLU(inplace=True)\n      (2): Dropout(p=0.5, inplace=False)\n      (3): Linear(in_features=4096, out_features=4096, bias=True)\n      (4): ReLU(inplace=True)\n      (5): Dropout(p=0.5, inplace=False)\n      (6): Linear(in_features=4096, out_features=1, bias=True)\n      (7): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.46653639472398634,
            0.46653639472398634
        ],
        "test_acc": [
            0.5193340494092373,
            0.5193340494092373
        ],
        "train_loss": [
            49.52293192781508,
            49.52293192781508
        ],
        "test_loss": [
            46.614583333333336,
            46.614583333333336
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.0001
            }
        }
    }
]
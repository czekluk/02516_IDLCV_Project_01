[
    {
        "model_name": "UnfrozenPretrainedVGG",
        "model": "UnfrozenPretrainedVGG(\n  (model): VGG(\n    (features): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (9): ReLU(inplace=True)\n      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (12): ReLU(inplace=True)\n      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (16): ReLU(inplace=True)\n      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (19): ReLU(inplace=True)\n      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (22): ReLU(inplace=True)\n      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (26): ReLU(inplace=True)\n      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (29): ReLU(inplace=True)\n      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (32): ReLU(inplace=True)\n      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (36): ReLU(inplace=True)\n      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (39): ReLU(inplace=True)\n      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (42): ReLU(inplace=True)\n      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))\n    (classifier): Sequential(\n      (0): Linear(in_features=25088, out_features=4096, bias=True)\n      (1): ReLU(inplace=True)\n      (2): Dropout(p=0.5, inplace=False)\n      (3): Linear(in_features=4096, out_features=4096, bias=True)\n      (4): ReLU(inplace=True)\n      (5): Dropout(p=0.5, inplace=False)\n      (6): Linear(in_features=4096, out_features=1, bias=True)\n      (7): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.5544699560332194,
            0.5979482169027845,
            0.797752808988764,
            0.8832437713727406,
            0.9086468001954079,
            0.93209574987787,
            0.9526135808500245,
            0.9706888128969223,
            0.9755740107474352,
            0.9843673668783586,
            0.9926722032242306,
            0.9936492427943332,
            0.9946262823644357,
            0.9960918417195896,
            0.9980459208597948,
            0.9985344406448461,
            0.9985344406448461,
            0.9985344406448461,
            0.9980459208597948,
            0.9990229604298974,
            0.9985344406448461,
            0.9995114802149487,
            0.9980459208597948,
            1.0,
            0.9995114802149487,
            0.9990229604298974,
            0.9995114802149487,
            1.0,
            0.9980459208597948,
            0.9980459208597948,
            1.0,
            0.9995114802149487,
            0.9995114802149487,
            0.9980459208597948,
            1.0
        ],
        "test_acc": [
            0.5322234156820623,
            0.5392051557465092,
            0.7722878625134264,
            0.7497314715359829,
            0.7395273899033298,
            0.6514500537056928,
            0.7207303974221267,
            0.7653061224489796,
            0.7325456498388829,
            0.69656283566058,
            0.7293233082706767,
            0.7567132116004296,
            0.7986036519871106,
            0.7696025778732546,
            0.7669172932330827,
            0.7787325456498388,
            0.7631578947368421,
            0.7647690655209453,
            0.7701396348012889,
            0.7910848549946294,
            0.7738990332975295,
            0.7819548872180451,
            0.7953813104189044,
            0.7894736842105263,
            0.7674543501611171,
            0.7943071965628357,
            0.7701396348012889,
            0.7653061224489796,
            0.7465091299677766,
            0.7755102040816326,
            0.8082706766917294,
            0.7926960257787325,
            0.7916219119226638,
            0.7878625134264232,
            0.8152524167561761
        ],
        "train_loss": [
            0.6876409202814102,
            0.6472657024860382,
            0.5289680883288383,
            0.3405081778764725,
            0.2236427739262581,
            0.16970409266650677,
            0.11859479919075966,
            0.08689349889755249,
            0.06384308729320765,
            0.04862223705276847,
            0.033166563138365746,
            0.0226026811869815,
            0.0161189460195601,
            0.012766020256094635,
            0.009245610854122788,
            0.00892232492333278,
            0.007999364577699453,
            0.006665094755589962,
            0.006627518974710256,
            0.005436284758616239,
            0.004917403421131894,
            0.0031993820157367736,
            0.005489561008289456,
            0.0021529218211071566,
            0.003440675121964887,
            0.005904242512769997,
            0.003596369657316245,
            0.0022602952958550304,
            0.005041894939495251,
            0.004995057373889722,
            0.0022857814183225855,
            0.003087701159529388,
            0.002442911238176748,
            0.006766828126274049,
            0.003148122297716327
        ],
        "test_loss": [
            0.6828623265028,
            0.6687864810228348,
            0.6073128655552864,
            0.5016733855009079,
            0.4775858409702778,
            0.6100878231227398,
            0.4990704767405987,
            0.4455019123852253,
            0.5724977999925613,
            0.712305411696434,
            0.65011977404356,
            0.5565227270126343,
            0.4718232937157154,
            0.5622389428317547,
            0.5852700397372246,
            0.5532033331692219,
            0.6307791993021965,
            0.6356548368930817,
            0.6048561222851276,
            0.5246371999382973,
            0.602137953042984,
            0.5701096914708614,
            0.530075915157795,
            0.5613487474620342,
            0.6455960273742676,
            0.5405165515840054,
            0.6538790911436081,
            0.6561016589403152,
            0.7145441360771656,
            0.5895202271640301,
            0.5029028207063675,
            0.537304800003767,
            0.5404599756002426,
            0.5727187804877758,
            0.470130380243063
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "UnfrozenPretrainedDenseNet121",
        "model": "UnfrozenPretrainedDenseNet121(\n  (model): DenseNet(\n    (features): Sequential(\n      (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu0): ReLU(inplace=True)\n      (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (denseblock1): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition1): _Transition(\n        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock2): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition2): _Transition(\n        (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock3): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer17): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer18): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer19): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer20): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer21): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer22): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer23): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer24): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition3): _Transition(\n        (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock4): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (classifier): Sequential(\n      (0): Linear(in_features=1024, out_features=1, bias=True)\n      (1): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.6785539814362481,
            0.9042501221299463,
            0.9257449926722032,
            0.9628724963361016,
            0.9775280898876404,
            0.9809477283829995,
            0.9926722032242306,
            0.9936492427943332,
            0.9956033219345384,
            0.9990229604298974,
            0.9970688812896922,
            0.9975574010747436,
            0.9975574010747436,
            0.9985344406448461,
            0.9990229604298974,
            0.9995114802149487,
            1.0,
            1.0,
            0.9995114802149487,
            1.0,
            1.0,
            0.9995114802149487,
            0.9995114802149487,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "test_acc": [
            0.8174006444683136,
            0.8329752953813104,
            0.8093447905477981,
            0.7540279269602578,
            0.7712137486573577,
            0.715359828141783,
            0.7185821697099892,
            0.7465091299677766,
            0.7432867883995704,
            0.765843179377014,
            0.7841031149301826,
            0.751342642320086,
            0.738453276047261,
            0.7636949516648764,
            0.7781954887218046,
            0.7771213748657357,
            0.7685284640171858,
            0.7792696025778733,
            0.7862513426423201,
            0.7867883995703545,
            0.7781954887218046,
            0.7755102040816326,
            0.7776584317937701,
            0.784640171858217,
            0.7975295381310419,
            0.7986036519871106,
            0.799140708915145,
            0.7916219119226638,
            0.7910848549946294,
            0.7900107411385607,
            0.7781954887218046,
            0.7636949516648764,
            0.7712137486573577,
            0.7712137486573577,
            0.7712137486573577
        ],
        "train_loss": [
            0.566989354789257,
            0.24154465273022652,
            0.1778171192854643,
            0.10299809463322163,
            0.07401655660942197,
            0.0565691189840436,
            0.029343294678255916,
            0.026548637077212334,
            0.019083726801909506,
            0.010514142573811114,
            0.012848594167735428,
            0.009690092294476926,
            0.01028049027081579,
            0.006164766906294972,
            0.005272554408293217,
            0.0042087793990504,
            0.00351709098322317,
            0.0027726753760362044,
            0.004154019261477515,
            0.0029376796446740627,
            0.0030192814592737705,
            0.003192881995346397,
            0.004124729981413111,
            0.002561960485763848,
            0.003479172330116853,
            0.0018546443607192487,
            0.0016119689535116777,
            0.0024894306116038933,
            0.0016555988549953327,
            0.0016719607083359733,
            0.001985854920349084,
            0.0015892370865913108,
            0.0014846522390143946,
            0.0014979336701799184,
            0.0016214421048061922
        ],
        "test_loss": [
            0.4460047744214535,
            0.3710532933473587,
            0.40128741413354874,
            0.45176646672189236,
            0.45844166725873947,
            0.616740345954895,
            0.6240023039281368,
            0.6408108547329903,
            0.652694895863533,
            0.577160906046629,
            0.5274020656943321,
            0.6799139454960823,
            0.7465427815914154,
            0.6390558108687401,
            0.6064436510205269,
            0.6386381089687347,
            0.6923481747508049,
            0.6702957600355148,
            0.5837171003222466,
            0.6137191206216812,
            0.6634131595492363,
            0.667888879776001,
            0.6516502350568771,
            0.6178609058260918,
            0.5789837390184402,
            0.6110556796193123,
            0.5892862752079964,
            0.6247044131159782,
            0.6070657595992088,
            0.6578651145100594,
            0.6969142407178879,
            0.7228439450263977,
            0.7078519314527512,
            0.7032397016882896,
            0.7046140879392624
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "CNNWithMoreConvLayers",
        "model": "CNNWithMoreConvLayers(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.5, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.5, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=12544, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.4948705422569614,
            0.5403028822667318,
            0.6394723986321446,
            0.6805080605764533,
            0.6941866145578895,
            0.7151929653150952,
            0.7244748412310699,
            0.7156814851001465,
            0.73961895456766,
            0.7195896433805569,
            0.723009281875916,
            0.7288715192965315,
            0.7332681973619931,
            0.7225207620908647,
            0.7405959941377626,
            0.727894479726429,
            0.7405959941377626,
            0.7337567171470445,
            0.7445041524181729,
            0.7425500732779677,
            0.7440156326331216,
            0.7401074743527113,
            0.7445041524181729,
            0.73961895456766,
            0.7435271128480704,
            0.7459697117733268,
            0.7386419149975574,
            0.7386419149975574,
            0.7352222765021983,
            0.7493893502686859,
            0.7459697117733268,
            0.7474352711284807,
            0.7542745481191988,
            0.7552515876893015,
            0.7410845139228138
        ],
        "test_acc": [
            0.5193340494092373,
            0.4817400644468314,
            0.4892588614393126,
            0.5021482277121375,
            0.5590762620837809,
            0.5628356605800214,
            0.6638023630504833,
            0.6568206229860365,
            0.6203007518796992,
            0.640171858216971,
            0.6229860365198711,
            0.6654135338345865,
            0.6954887218045113,
            0.564983888292159,
            0.6186895810955961,
            0.709452201933405,
            0.7126745435016112,
            0.6981740064446831,
            0.7013963480128894,
            0.6874328678839957,
            0.7164339419978518,
            0.7223415682062299,
            0.7158968850698174,
            0.7228786251342643,
            0.7250268528464017,
            0.7255639097744361,
            0.7207303974221267,
            0.7003222341568206,
            0.723952738990333,
            0.6691729323308271,
            0.7051557465091299,
            0.6815252416756176,
            0.7298603651987111,
            0.7142857142857143,
            0.7330827067669173
        ],
        "train_loss": [
            0.7411128133535385,
            0.6872522160410881,
            0.6584779024124146,
            0.6237170919775963,
            0.6113766729831696,
            0.5869577452540398,
            0.5890158116817474,
            0.5882288068532944,
            0.5755778029561043,
            0.5770888775587082,
            0.5778493359684944,
            0.5709302946925163,
            0.560567170381546,
            0.5799466297030449,
            0.5637046545743942,
            0.5678955093026161,
            0.5556413978338242,
            0.556942880153656,
            0.5570158213376999,
            0.5422271639108658,
            0.5468573942780495,
            0.5462068170309067,
            0.545581229031086,
            0.5396528877317905,
            0.5403520315885544,
            0.5388835296034813,
            0.543279655277729,
            0.5419243648648262,
            0.5342659540474415,
            0.5333878993988037,
            0.53666552901268,
            0.5413491204380989,
            0.5255986079573631,
            0.5226363688707352,
            0.5242773368954659
        ],
        "test_loss": [
            0.693054735660553,
            0.6928746923804283,
            0.6920860409736633,
            0.6889027580618858,
            0.6876692920923233,
            0.6830079779028893,
            0.6770077049732208,
            0.6738892868161201,
            0.6776934117078781,
            0.6753366962075233,
            0.67975053191185,
            0.6744385734200478,
            0.6630835309624672,
            0.6836618259549141,
            0.6725658550858498,
            0.6625214144587517,
            0.6548461765050888,
            0.6637799367308617,
            0.6541091427206993,
            0.6555729061365128,
            0.6551846712827682,
            0.6424993425607681,
            0.6491753831505775,
            0.6372668817639351,
            0.650961846113205,
            0.6422763243317604,
            0.6540099233388901,
            0.6603529900312424,
            0.6425167843699455,
            0.6324868053197861,
            0.6519052609801292,
            0.6332572847604752,
            0.616305761039257,
            0.6174608916044235,
            0.6267810016870499
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "CNNWithMoreConvLayers",
        "model": "CNNWithMoreConvLayers(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.5, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.5, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=12544, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5100146555935515,
            0.5368832437713728,
            0.5559355153883733,
            0.5730337078651685,
            0.618466047874939,
            0.6414264777723497,
            0.6761113825109917,
            0.7073766487542745,
            0.7112848070346849,
            0.7107962872496336,
            0.7142159257449927,
            0.7332681973619931,
            0.723009281875916,
            0.726428920371275,
            0.734733756717147,
            0.7137274059599413,
            0.7322911577918906,
            0.7318026380068393,
            0.7313141182217879,
            0.7327796775769418,
            0.7357107962872497,
            0.7361993160723009,
            0.7376648754274548,
            0.7254518808011724,
            0.7332681973619931,
            0.7327796775769418,
            0.7415730337078652,
            0.7386419149975574,
            0.7405959941377626,
            0.73961895456766,
            0.7532975085490963,
            0.7420615534929165,
            0.7513434294088911,
            0.7352222765021983,
            0.7464582315583781
        ],
        "test_acc": [
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.48711063372717506,
            0.6369495166487648,
            0.5343716433941997,
            0.4983888292158969,
            0.6482277121374865,
            0.59828141783029,
            0.6245972073039742,
            0.6487647690655209,
            0.5977443609022557,
            0.5461868958109559,
            0.5891514500537057,
            0.6106337271750806,
            0.5687432867883996,
            0.6874328678839957,
            0.644468313641246,
            0.6938775510204082,
            0.6976369495166488,
            0.6788399570354458,
            0.7046186895810956,
            0.7121374865735768,
            0.7030075187969925,
            0.7099892588614393,
            0.709452201933405,
            0.6842105263157895,
            0.6933404940923737,
            0.719656283566058,
            0.7121374865735768,
            0.7201933404940923,
            0.7266380236305048
        ],
        "train_loss": [
            0.6991802453994751,
            0.6945284679532051,
            0.6852777972817421,
            0.6737763583660126,
            0.657182365655899,
            0.6334529519081116,
            0.6066718250513077,
            0.5905073285102844,
            0.5851974040269852,
            0.5842116475105286,
            0.5758924037218094,
            0.5619642660021782,
            0.5665145218372345,
            0.5618051812052727,
            0.5584071204066277,
            0.5655033439397812,
            0.555604100227356,
            0.5545359551906586,
            0.556301936507225,
            0.5478508025407791,
            0.5433077067136765,
            0.5472368001937866,
            0.546819444745779,
            0.5476427599787712,
            0.5466722622513771,
            0.54508376121521,
            0.5388835519552231,
            0.5460606068372726,
            0.5372597798705101,
            0.5415332466363907,
            0.5335715934634209,
            0.540529265999794,
            0.5271580554544926,
            0.5256085246801376,
            0.5334992483258247
        ],
        "test_loss": [
            0.6930513605475426,
            0.6934554725885391,
            0.6933791786432266,
            0.6952077448368073,
            0.6979563161730766,
            0.6916520893573761,
            0.6864411532878876,
            0.6826439425349236,
            0.6865650340914726,
            0.6876871064305305,
            0.6822099760174751,
            0.6834018155932426,
            0.6829273030161858,
            0.6790726035833359,
            0.6804310232400894,
            0.682647630572319,
            0.6749584153294563,
            0.67646773904562,
            0.6798487603664398,
            0.6713124960660934,
            0.6675639376044273,
            0.6725844517350197,
            0.6689690127968788,
            0.6643485203385353,
            0.6617250293493271,
            0.6588594317436218,
            0.6598514690995216,
            0.6586661264300346,
            0.6638879552483559,
            0.6635925993323326,
            0.6568695902824402,
            0.661898747086525,
            0.6550087109208107,
            0.6547680795192719,
            0.6552762538194656
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "UnfrozenPretrainedResNet34",
        "model": "UnfrozenPretrainedResNet34(\n  (model): ResNet(\n    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (relu): ReLU(inplace=True)\n    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    (layer1): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): BasicBlock(\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer2): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): BasicBlock(\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (3): BasicBlock(\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer3): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (3): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (4): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (5): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer4): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): BasicBlock(\n        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n    (fc): Sequential(\n      (0): Linear(in_features=512, out_features=1, bias=True)\n      (1): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.7049340498290181,
            0.9066927210552027,
            0.9325842696629213,
            0.9628724963361016,
            0.9692232535417684,
            0.978505129457743,
            0.9858329262335125,
            0.9926722032242306,
            0.9921836834391793,
            0.9965803615046409,
            0.9907181240840254,
            0.9970688812896922,
            0.9985344406448461,
            0.9985344406448461,
            0.9985344406448461,
            0.9995114802149487,
            0.9980459208597948,
            0.9990229604298974,
            0.9980459208597948,
            0.9980459208597948,
            0.9995114802149487,
            0.9990229604298974,
            1.0,
            0.9990229604298974,
            0.9975574010747436,
            0.9985344406448461,
            0.9990229604298974,
            0.9980459208597948,
            0.9975574010747436,
            1.0,
            0.9990229604298974,
            1.0,
            0.9995114802149487,
            1.0,
            0.9985344406448461
        ],
        "test_acc": [
            0.8029001074113856,
            0.7851772287862513,
            0.7599355531686359,
            0.7046186895810956,
            0.6374865735767992,
            0.6595059076262084,
            0.6970998925886144,
            0.7653061224489796,
            0.7465091299677766,
            0.7508055853920516,
            0.7320085929108485,
            0.7411385606874329,
            0.7534908700322234,
            0.7218045112781954,
            0.7330827067669173,
            0.7201933404940923,
            0.7540279269602578,
            0.7545649838882922,
            0.7432867883995704,
            0.7454350161117078,
            0.719656283566058,
            0.6616541353383458,
            0.682062298603652,
            0.7148227712137487,
            0.738453276047261,
            0.7309344790547798,
            0.7212674543501612,
            0.7325456498388829,
            0.7223415682062299,
            0.6799140708915145,
            0.6874328678839957,
            0.7046186895810956,
            0.7083780880773362,
            0.69656283566058,
            0.7255639097744361
        ],
        "train_loss": [
            0.5416547879576683,
            0.25034522265195847,
            0.16471931152045727,
            0.10789664648473263,
            0.07983860746026039,
            0.0621842504478991,
            0.04522571200504899,
            0.023846180643886328,
            0.022407743614166975,
            0.01459037174936384,
            0.02022245724219829,
            0.009031997993588448,
            0.005984693474601954,
            0.008579490066040307,
            0.008451111963950098,
            0.005587363411905244,
            0.006728160806233063,
            0.004787587822647765,
            0.005509489419637248,
            0.0068801800662186,
            0.0033194956049555913,
            0.0049891447415575385,
            0.0033647748714429326,
            0.004035858481074683,
            0.005736096121836454,
            0.004982378683052957,
            0.0038331393734551966,
            0.005178884821361862,
            0.008425519059528597,
            0.0032555915240664035,
            0.0029898446809966117,
            0.0021969522058498114,
            0.002990361681440845,
            0.002238533488707617,
            0.004441973200300708
        ],
        "test_loss": [
            0.4777032472193241,
            0.4305828623473644,
            0.46545732766389847,
            0.5504469946026802,
            0.7502020597457886,
            0.7118776962161064,
            0.6601915061473846,
            0.514288242906332,
            0.5933776348829269,
            0.637500636279583,
            0.6796877086162567,
            0.6407424286007881,
            0.6030381545424461,
            0.7048239633440971,
            0.6596724689006805,
            0.7160248532891273,
            0.6295281425118446,
            0.6827309876680374,
            0.6695879399776459,
            0.6783529371023178,
            0.7950406670570374,
            1.0866004601120949,
            0.9757308512926102,
            0.8161596804857254,
            0.7163731604814529,
            0.7716346681118011,
            0.8146427869796753,
            0.7511353194713593,
            0.7947658896446228,
            0.9845622554421425,
            0.9741639494895935,
            0.8919995576143265,
            0.8693526163697243,
            0.9412638023495674,
            0.7916011214256287
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "CNNWithDifferentActivations",
        "model": "CNNWithDifferentActivations(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): LeakyReLU(negative_slope=0.1)\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=128, bias=True)\n    (1): LeakyReLU(negative_slope=0.1)\n    (2): Linear(in_features=128, out_features=1, bias=True)\n    (3): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5300439667806546,
            0.596971177332682,
            0.6765999022960429,
            0.7059110893991206,
            0.7171470444553004,
            0.727894479726429,
            0.7327796775769418,
            0.7269174401563263,
            0.7386419149975574,
            0.7435271128480704,
            0.7449926722032242,
            0.7352222765021983,
            0.7464582315583781,
            0.7376648754274548,
            0.7454811919882756,
            0.7425500732779677,
            0.7464582315583781,
            0.7420615534929165,
            0.7361993160723009,
            0.7537860283341475,
            0.7581827063996092,
            0.7547630679042501,
            0.7508549096238397,
            0.7474352711284807,
            0.7489008304836345,
            0.7523204689789936,
            0.7508549096238397,
            0.7547630679042501,
            0.7572056668295066,
            0.7620908646800195,
            0.7557401074743527,
            0.7537860283341475,
            0.7606253053248656,
            0.7454811919882756,
            0.764533463605276
        ],
        "test_acc": [
            0.4806659505907626,
            0.5091299677765844,
            0.5365198711063373,
            0.6557465091299678,
            0.6723952738990333,
            0.6825993555316864,
            0.6697099892588615,
            0.6809881847475833,
            0.6670247046186896,
            0.6691729323308271,
            0.7062298603651987,
            0.7180451127819549,
            0.6933404940923737,
            0.7228786251342643,
            0.7126745435016112,
            0.6793770139634802,
            0.7013963480128894,
            0.7261009667024705,
            0.6750805585392051,
            0.6879699248120301,
            0.7212674543501612,
            0.7132116004296455,
            0.7266380236305048,
            0.7293233082706767,
            0.700859291084855,
            0.6369495166487648,
            0.6702470461868958,
            0.6718582169709989,
            0.7164339419978518,
            0.7148227712137487,
            0.6374865735767992,
            0.7212674543501612,
            0.7110633727175081,
            0.7148227712137487,
            0.7244897959183674
        ],
        "train_loss": [
            0.6892171204090118,
            0.6634557470679283,
            0.6125624626874924,
            0.5784282311797142,
            0.5648554712533951,
            0.5548700019717216,
            0.5617604330182076,
            0.5573987737298012,
            0.5560626462101936,
            0.5467561185359955,
            0.5391707196831703,
            0.5492672175168991,
            0.5271157249808311,
            0.5370252132415771,
            0.531336959451437,
            0.5294195003807545,
            0.535174585878849,
            0.5339220985770226,
            0.5353938452899456,
            0.5200945176184177,
            0.5180470570921898,
            0.5102990567684174,
            0.5136219784617424,
            0.5149993151426315,
            0.5173517167568207,
            0.5166757106781006,
            0.5152484066784382,
            0.5060271881520748,
            0.5053343549370766,
            0.5057453885674477,
            0.5041967965662479,
            0.5029056705534458,
            0.5003716088831425,
            0.5179787613451481,
            0.5025403648614883
        ],
        "test_loss": [
            0.6928839683532715,
            0.6886726096272469,
            0.6846476420760155,
            0.6702897921204567,
            0.6688267290592194,
            0.6661433205008507,
            0.6673675999045372,
            0.6658795922994614,
            0.6630982011556625,
            0.6581440344452858,
            0.653762936592102,
            0.6516859084367752,
            0.6553970053792,
            0.6480509340763092,
            0.6503826826810837,
            0.6436235830187798,
            0.6464546397328377,
            0.6434316784143448,
            0.6524056047201157,
            0.6520339623093605,
            0.6378317251801491,
            0.6428753063082695,
            0.6334024667739868,
            0.6329602003097534,
            0.6416040584445,
            0.6480767503380775,
            0.6467621251940727,
            0.6449327617883682,
            0.6391727179288864,
            0.6356790885329247,
            0.6476898267865181,
            0.6311744749546051,
            0.6330122128129005,
            0.6367885172367096,
            0.6386883109807968
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "CNNWithMoreDenseLayers",
        "model": "CNNWithMoreDenseLayers(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=128, bias=True)\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): Linear(in_features=128, out_features=64, bias=True)\n    (4): ReLU()\n    (5): Linear(in_features=64, out_features=64, bias=True)\n    (6): ReLU()\n    (7): Linear(in_features=64, out_features=64, bias=True)\n    (8): ReLU()\n    (9): Linear(in_features=64, out_features=1, bias=True)\n    (10): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5315095261358085,
            0.5310210063507572,
            0.5549584758182706,
            0.5759648265754763,
            0.5862237420615535,
            0.6101612115290669,
            0.6223742061553493,
            0.6311675622862726,
            0.6380068392769908,
            0.6472887151929653,
            0.6678065461651197,
            0.6873473375671715,
            0.701514411333659,
            0.7073766487542745,
            0.7088422081094284,
            0.723009281875916,
            0.727894479726429,
            0.7366878358573522,
            0.734733756717147,
            0.7322911577918906,
            0.7366878358573522,
            0.7313141182217879,
            0.7318026380068393,
            0.734733756717147,
            0.7464582315583781,
            0.7352222765021983,
            0.7469467513434294,
            0.743038593063019,
            0.7366878358573522,
            0.7503663898387885,
            0.734733756717147
        ],
        "test_acc": [
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4897959183673469,
            0.6095596133190118,
            0.6122448979591837,
            0.6127819548872181,
            0.6557465091299678,
            0.6154672395273899,
            0.5569280343716434,
            0.5784103114930182,
            0.6331901181525241,
            0.640171858216971,
            0.6390977443609023,
            0.635875402792696,
            0.6595059076262084,
            0.6439312567132116,
            0.6831364124597207,
            0.6954887218045113,
            0.6970998925886144,
            0.7078410311493019,
            0.7040816326530612,
            0.7062298603651987,
            0.7223415682062299
        ],
        "train_loss": [
            0.6921362653374672,
            0.691863015294075,
            0.6912276521325111,
            0.6904648169875145,
            0.6899359971284866,
            0.6883413344621658,
            0.6867464855313301,
            0.6855639293789864,
            0.6823031306266785,
            0.6773099973797798,
            0.6721978411078453,
            0.6631343960762024,
            0.6467851102352142,
            0.6374789401888847,
            0.6169042810797691,
            0.6052727177739143,
            0.5900620371103287,
            0.5906427502632141,
            0.5795072391629219,
            0.5618517324328423,
            0.5588022992014885,
            0.5569220036268234,
            0.5509054958820343,
            0.5515202805399895,
            0.5461070016026497,
            0.5438229367136955,
            0.5472281202673912,
            0.5503615140914917,
            0.5374294593930244,
            0.5433816015720367,
            0.5342494286596775,
            0.5369587764143944,
            0.5386047884821892,
            0.5316504538059235,
            0.537623442709446
        ],
        "test_loss": [
            0.6944995075464249,
            0.6950758472084999,
            0.6952953040599823,
            0.6969015002250671,
            0.6964722350239754,
            0.6964998468756676,
            0.6968491822481155,
            0.6961504891514778,
            0.6973105072975159,
            0.6967187896370888,
            0.6981150433421135,
            0.6957969069480896,
            0.6949421018362045,
            0.6995545327663422,
            0.6902901232242584,
            0.6800659000873566,
            0.6769598796963692,
            0.6721089482307434,
            0.6637813672423363,
            0.6650426909327507,
            0.6729636490345001,
            0.667595624923706,
            0.6573465317487717,
            0.6580437943339348,
            0.6501346156001091,
            0.6529197245836258,
            0.6499360576272011,
            0.6473766565322876,
            0.6360029801726341,
            0.6344636976718903,
            0.630752220749855,
            0.6292145103216171,
            0.6270579844713211,
            0.6242092177271843,
            0.6282844617962837
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "CNNWithDropout",
        "model": "CNNWithDropout(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.6, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.6, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5197850512945774,
            0.5324865657059111,
            0.6023448949682462,
            0.6331216414264778,
            0.6765999022960429,
            0.6976062530532486,
            0.6990718124084025,
            0.7210552027357108,
            0.7078651685393258,
            0.7176355642403517,
            0.7166585246702492,
            0.7249633610161211,
            0.7239863214460186,
            0.7322911577918906,
            0.723009281875916,
            0.723009281875916,
            0.727894479726429,
            0.7288715192965315,
            0.7293600390815828,
            0.7366878358573522,
            0.7313141182217879,
            0.7371763556424035,
            0.734733756717147,
            0.7318026380068393,
            0.7313141182217879,
            0.7371763556424035,
            0.7322911577918906,
            0.7298485588666341,
            0.7459697117733268,
            0.7464582315583781,
            0.7518319491939424,
            0.7508549096238397,
            0.7420615534929165,
            0.7503663898387885,
            0.7410845139228138
        ],
        "test_acc": [
            0.6433941997851772,
            0.4822771213748657,
            0.48120300751879697,
            0.6063372717508055,
            0.664876476906552,
            0.6933404940923737,
            0.7040816326530612,
            0.7089151450053706,
            0.6852846401718582,
            0.7137486573576799,
            0.6407089151450054,
            0.7207303974221267,
            0.6970998925886144,
            0.7116004296455424,
            0.7035445757250268,
            0.6149301825993555,
            0.6541353383458647,
            0.6723952738990333,
            0.6949516648764769,
            0.700859291084855,
            0.7234156820622986,
            0.6895810955961332,
            0.7142857142857143,
            0.7234156820622986,
            0.7083780880773362,
            0.7212674543501612,
            0.7142857142857143,
            0.7089151450053706,
            0.7030075187969925,
            0.7250268528464017,
            0.7250268528464017,
            0.7164339419978518,
            0.7191192266380236,
            0.7056928034371643,
            0.7110633727175081
        ],
        "train_loss": [
            1.5336129069328308,
            0.7307494580745697,
            0.6657590642571449,
            0.6418715342879295,
            0.6139736324548721,
            0.5988885760307312,
            0.5991802141070366,
            0.5835956782102585,
            0.5914938226342201,
            0.582347072660923,
            0.5904558002948761,
            0.5731838420033455,
            0.5676215961575508,
            0.5654619261622429,
            0.5692766457796097,
            0.5669219568371773,
            0.5590314418077469,
            0.5733543708920479,
            0.5581738501787186,
            0.5585233196616173,
            0.5608290582895279,
            0.5656476616859436,
            0.553439550101757,
            0.5514151155948639,
            0.5525383502244949,
            0.5428553409874439,
            0.5503836572170258,
            0.5500975102186203,
            0.5418848618865013,
            0.539351474493742,
            0.5397905111312866,
            0.538226768374443,
            0.5400877594947815,
            0.5362733826041222,
            0.5346639417111874
        ],
        "test_loss": [
            0.6892441436648369,
            0.691892683506012,
            0.692187175154686,
            0.6907042488455772,
            0.6883451193571091,
            0.6845861747860909,
            0.6782870441675186,
            0.6731022074818611,
            0.6793726980686188,
            0.6768691912293434,
            0.6816477850079536,
            0.6741194128990173,
            0.6745033338665962,
            0.6716655343770981,
            0.6703290417790413,
            0.6772170215845108,
            0.6751261502504349,
            0.6719432473182678,
            0.6700863018631935,
            0.6689944118261337,
            0.6674302518367767,
            0.6742651015520096,
            0.6687089800834656,
            0.6612598970532417,
            0.6614314243197441,
            0.66472078114748,
            0.6624004989862442,
            0.662873737514019,
            0.658548578619957,
            0.6582847461104393,
            0.6596588343381882,
            0.6546997353434563,
            0.6548201590776443,
            0.6516328603029251,
            0.6438136324286461
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "CNNWithDifferentActivations",
        "model": "CNNWithDifferentActivations(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): LeakyReLU(negative_slope=0.1)\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=128, bias=True)\n    (1): LeakyReLU(negative_slope=0.1)\n    (2): Linear(in_features=128, out_features=1, bias=True)\n    (3): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5236932095749878,
            0.5388373229115779,
            0.6678065461651197,
            0.6829506595017099,
            0.6912554958475818,
            0.7000488519785051,
            0.7132388861748901,
            0.7298485588666341,
            0.7293600390815828,
            0.7322911577918906,
            0.7371763556424035,
            0.7498778700537372,
            0.7459697117733268,
            0.7376648754274548,
            0.7410845139228138,
            0.7386419149975574,
            0.7440156326331216,
            0.7425500732779677,
            0.7420615534929165,
            0.7425500732779677,
            0.7425500732779677,
            0.7552515876893015,
            0.7410845139228138,
            0.7410845139228138,
            0.7523204689789936,
            0.761113825109917,
            0.761113825109917,
            0.7523204689789936,
            0.7410845139228138,
            0.7557401074743527,
            0.7552515876893015,
            0.756228627259404,
            0.7547630679042501,
            0.7572056668295066,
            0.7650219833903273
        ],
        "test_acc": [
            0.5193340494092373,
            0.49140708915145004,
            0.48764769065520946,
            0.6825993555316864,
            0.6659505907626209,
            0.5483351235230934,
            0.5547798066595059,
            0.6181525241675617,
            0.6718582169709989,
            0.6493018259935553,
            0.6278195488721805,
            0.6348012889366272,
            0.6020408163265306,
            0.667561761546724,
            0.6020408163265306,
            0.6895810955961332,
            0.6761546723952739,
            0.686358754027927,
            0.7201933404940923,
            0.6772287862513426,
            0.6809881847475833,
            0.7244897959183674,
            0.7110633727175081,
            0.7164339419978518,
            0.6997851772287863,
            0.6482277121374865,
            0.6911922663802363,
            0.6600429645542427,
            0.6154672395273899,
            0.700859291084855,
            0.7207303974221267,
            0.6331901181525241,
            0.6949516648764769,
            0.7330827067669173,
            0.700859291084855
        ],
        "train_loss": [
            5.425481393933296,
            0.7513294890522957,
            0.6508904844522476,
            0.6190449744462967,
            0.6145465224981308,
            0.5904940366744995,
            0.5777817815542221,
            0.5577750355005264,
            0.5608219802379608,
            0.557713657617569,
            0.5475778728723526,
            0.5423582345247269,
            0.545715756714344,
            0.5487377867102623,
            0.5361374467611313,
            0.5462918505072594,
            0.5376458503305912,
            0.5437123440206051,
            0.5450961217284203,
            0.5390792116522789,
            0.5394401103258133,
            0.5409943833947182,
            0.5419283807277679,
            0.533007375895977,
            0.5238136574625969,
            0.5264677666127682,
            0.5193662792444229,
            0.5287645384669304,
            0.5227815732359886,
            0.5264133922755718,
            0.5225885510444641,
            0.5064913518726826,
            0.5218271762132645,
            0.513358611613512,
            0.5106598660349846
        ],
        "test_loss": [
            0.6859787181019783,
            0.7084326446056366,
            0.7130599841475487,
            0.6391963213682175,
            0.6321365982294083,
            0.6742719039320946,
            0.6781756579875946,
            0.674779586493969,
            0.6724765673279762,
            0.6743374615907669,
            0.6767452210187912,
            0.6738318800926208,
            0.6729710549116135,
            0.6713041141629219,
            0.6730449721217155,
            0.6668606773018837,
            0.6693526059389114,
            0.6663366034626961,
            0.6629238873720169,
            0.6614981815218925,
            0.6555790156126022,
            0.6533149778842926,
            0.6551564037799835,
            0.654047466814518,
            0.6484628021717072,
            0.655271090567112,
            0.6479709297418594,
            0.6520453318953514,
            0.6518477275967598,
            0.6475811302661896,
            0.6490848734974861,
            0.663269154727459,
            0.6489776819944382,
            0.6468781679868698,
            0.6417243406176567
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "CNNWithMoreDenseLayers",
        "model": "CNNWithMoreDenseLayers(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=128, bias=True)\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): Linear(in_features=128, out_features=64, bias=True)\n    (4): ReLU()\n    (5): Linear(in_features=64, out_features=64, bias=True)\n    (6): ReLU()\n    (7): Linear(in_features=64, out_features=64, bias=True)\n    (8): ReLU()\n    (9): Linear(in_features=64, out_features=1, bias=True)\n    (10): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5310210063507572,
            0.5715681485100147,
            0.618466047874939,
            0.6697606253053249,
            0.7122618466047875,
            0.7195896433805569,
            0.723009281875916,
            0.727894479726429,
            0.7386419149975574,
            0.7366878358573522,
            0.7371763556424035,
            0.7357107962872497,
            0.7361993160723009,
            0.7313141182217879,
            0.7244748412310699,
            0.7376648754274548,
            0.7283829995114802,
            0.7425500732779677,
            0.7376648754274548,
            0.7518319491939424,
            0.7440156326331216,
            0.7327796775769418,
            0.7322911577918906,
            0.7498778700537372,
            0.7552515876893015,
            0.73961895456766,
            0.7581827063996092,
            0.7532975085490963,
            0.743038593063019,
            0.7532975085490963,
            0.7391304347826086,
            0.747923790913532,
            0.7454811919882756,
            0.7532975085490963,
            0.7640449438202247
        ],
        "test_acc": [
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4822771213748657,
            0.6084854994629431,
            0.6305048335123523,
            0.6949516648764769,
            0.7250268528464017,
            0.7261009667024705,
            0.673469387755102,
            0.677765843179377,
            0.7287862513426423,
            0.7314715359828142,
            0.7046186895810956,
            0.7019334049409237,
            0.6938775510204082,
            0.7142857142857143,
            0.728249194414608,
            0.640171858216971,
            0.6659505907626209,
            0.6369495166487648,
            0.6299677765843179,
            0.7325456498388829,
            0.7314715359828142,
            0.6788399570354458,
            0.6272824919441461,
            0.621374865735768,
            0.6160042964554243,
            0.6595059076262084,
            0.7116004296455424,
            0.6176154672395274,
            0.7250268528464017,
            0.6342642320085929,
            0.6471535982814178,
            0.6659505907626209
        ],
        "train_loss": [
            0.6914244964718819,
            0.6833149343729019,
            0.6592735350131989,
            0.6246337890625,
            0.5897731706500053,
            0.5751485377550125,
            0.5744952708482742,
            0.5671937167644501,
            0.550887294113636,
            0.5564016997814178,
            0.5471346378326416,
            0.5498673915863037,
            0.5593123137950897,
            0.554348886013031,
            0.5541857406497002,
            0.5417730659246445,
            0.5507446154952049,
            0.537007287144661,
            0.547680601477623,
            0.5302063152194023,
            0.531521238386631,
            0.546743493527174,
            0.5466029345989227,
            0.536507461220026,
            0.5286806561052799,
            0.5409964807331562,
            0.5255233496427536,
            0.528402604162693,
            0.5328427255153656,
            0.523237332701683,
            0.5267848260700703,
            0.5313856825232506,
            0.5259163752198219,
            0.52789306640625,
            0.5161158740520477
        ],
        "test_loss": [
            0.6999970898032188,
            0.6984037086367607,
            0.6999763026833534,
            0.6924585774540901,
            0.6714247614145279,
            0.666505865752697,
            0.6556059643626213,
            0.6512388214468956,
            0.6372963488101959,
            0.653534434735775,
            0.649598702788353,
            0.6288795992732048,
            0.6393943130970001,
            0.6188366189599037,
            0.6273975074291229,
            0.6165515258908272,
            0.6237607076764107,
            0.6253707855939865,
            0.6340987458825111,
            0.6193972304463387,
            0.6245474517345428,
            0.627898097038269,
            0.6231827512383461,
            0.6269078999757767,
            0.6238287091255188,
            0.6355246603488922,
            0.6348297223448753,
            0.6345410495996475,
            0.6216998845338821,
            0.6166837513446808,
            0.63313028216362,
            0.6100011095404625,
            0.6277807429432869,
            0.6167694479227066,
            0.6221527978777885
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "UnfrozenPretrainedVGG",
        "model": "UnfrozenPretrainedVGG(\n  (model): VGG(\n    (features): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (9): ReLU(inplace=True)\n      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (12): ReLU(inplace=True)\n      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (16): ReLU(inplace=True)\n      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (19): ReLU(inplace=True)\n      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (22): ReLU(inplace=True)\n      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (26): ReLU(inplace=True)\n      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (29): ReLU(inplace=True)\n      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (32): ReLU(inplace=True)\n      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (36): ReLU(inplace=True)\n      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (39): ReLU(inplace=True)\n      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (42): ReLU(inplace=True)\n      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))\n    (classifier): Sequential(\n      (0): Linear(in_features=25088, out_features=4096, bias=True)\n      (1): ReLU(inplace=True)\n      (2): Dropout(p=0.5, inplace=False)\n      (3): Linear(in_features=4096, out_features=4096, bias=True)\n      (4): ReLU(inplace=True)\n      (5): Dropout(p=0.5, inplace=False)\n      (6): Linear(in_features=4096, out_features=1, bias=True)\n      (7): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.6795310210063508,
            0.7640449438202247,
            0.8529555446995604,
            0.8886174890083048,
            0.8964338055691256,
            0.9115779189057157,
            0.9145090376160234,
            0.9311187103077675,
            0.9462628236443575,
            0.9516365412799218,
            0.9531021006350757,
            0.9550561797752809,
            0.9604298974108452,
            0.9721543722520762,
            0.9604298974108452,
            0.9638495359062041,
            0.9721543722520762,
            0.9594528578407425,
            0.9638495359062041,
            0.9702002931118711,
            0.961895456765999,
            0.97361993160723,
            0.9614069369809477,
            0.97361993160723,
            0.975085490962384,
            0.978505129457743,
            0.9755740107474352,
            0.9809477283829995,
            0.9770395701025891,
            0.9882755251587689,
            0.9804592085979482,
            0.975085490962384,
            0.9794821690278456,
            0.9765510503175379,
            0.9814362481680508
        ],
        "test_acc": [
            0.7325456498388829,
            0.6960257787325457,
            0.7647690655209453,
            0.5875402792696026,
            0.5220193340494093,
            0.5225563909774437,
            0.5198711063372717,
            0.5198711063372717,
            0.5193340494092373,
            0.5225563909774437,
            0.5241675617615468,
            0.5247046186895811,
            0.5343716433941997,
            0.5451127819548872,
            0.5214822771213748,
            0.5247046186895811,
            0.5424274973147154,
            0.6423200859291085,
            0.592373791621912,
            0.5370569280343717,
            0.5703544575725027,
            0.592373791621912,
            0.5311493018259935,
            0.5821697099892589,
            0.5741138560687433,
            0.5520945220193341,
            0.5520945220193341,
            0.6181525241675617,
            0.5848549946294307,
            0.5241675617615468,
            0.541890440386681,
            0.5773361976369495,
            0.6229860365198711,
            0.5703544575725027,
            0.6428571428571429
        ],
        "train_loss": [
            4.5472466722130775,
            0.5419522374868393,
            0.3595595918595791,
            0.26809280924499035,
            0.26074307784438133,
            0.20217581279575825,
            0.20737155713140965,
            0.161029108799994,
            0.12751572392880917,
            0.1354599054902792,
            0.1338287079706788,
            0.10872191796079278,
            0.09424432087689638,
            0.0758356680162251,
            0.09811199316754937,
            0.10646398179233074,
            0.07625079248100519,
            0.11442133877426386,
            0.10349893383681774,
            0.07788880867883563,
            0.10741575714200735,
            0.0799481850117445,
            0.10886423755437136,
            0.09026407171040773,
            0.07308946317061782,
            0.06891201692633331,
            0.06362596014514565,
            0.04881708510220051,
            0.05813339678570628,
            0.04139860882423818,
            0.06470011244527996,
            0.0672654565423727,
            0.060524899046868086,
            0.06222531013190746,
            0.060266169253736734
        ],
        "test_loss": [
            1.1897759810090065,
            0.6012252420186996,
            0.48983822017908096,
            2.041255623102188,
            5.469201862812042,
            4.5125808119773865,
            5.281732380390167,
            4.337533324956894,
            39.52211904525757,
            3.1245668828487396,
            4.587800025939941,
            6.454166412353516,
            4.3223976492881775,
            3.4842234551906586,
            3.077181786298752,
            2.3600431084632874,
            3.527876228094101,
            1.9031689912080765,
            1.3256747424602509,
            2.8761619925498962,
            2.6011659502983093,
            1.87758369743824,
            2.6427083909511566,
            2.139796793460846,
            2.7749731838703156,
            2.2367514222860336,
            3.326729118824005,
            1.8595942854881287,
            1.510251522064209,
            3.9239041805267334,
            2.1740764677524567,
            1.4094476997852325,
            1.1772713363170624,
            1.843977615237236,
            1.0356710031628609
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "UnfrozenPretrainedResNet34",
        "model": "UnfrozenPretrainedResNet34(\n  (model): ResNet(\n    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (relu): ReLU(inplace=True)\n    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    (layer1): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): BasicBlock(\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer2): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): BasicBlock(\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (3): BasicBlock(\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer3): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (3): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (4): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (5): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer4): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): BasicBlock(\n        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n    (fc): Sequential(\n      (0): Linear(in_features=512, out_features=1, bias=True)\n      (1): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.7938446507083536,
            0.8949682462139716,
            0.9145090376160234,
            0.9306301905227161,
            0.9350268685881779,
            0.9389350268685882,
            0.9570102589154861,
            0.9643380556912555,
            0.9589643380556913,
            0.9682462139716659,
            0.9653150952613581,
            0.9570102589154861,
            0.9697117733268197,
            0.9765510503175379,
            0.9770395701025891,
            0.966780654616512,
            0.9770395701025891,
            0.97361993160723,
            0.9794821690278456,
            0.9819247679531021,
            0.9721543722520762,
            0.9697117733268197,
            0.9770395701025891,
            0.9863214460185638,
            0.9780166096726918,
            0.9789936492427943,
            0.9809477283829995,
            0.9843673668783586,
            0.9741084513922814,
            0.9662921348314607,
            0.9809477283829995,
            0.966780654616512,
            0.9711773326819736,
            0.9833903273082559,
            0.97361993160723
        ],
        "test_acc": [
            0.7701396348012889,
            0.6997851772287863,
            0.5622986036519871,
            0.6691729323308271,
            0.6605800214822771,
            0.5456498388829216,
            0.5526315789473685,
            0.5386680988184748,
            0.5247046186895811,
            0.5767991407089151,
            0.5349087003222341,
            0.6476906552094522,
            0.5520945220193341,
            0.5300751879699248,
            0.5214822771213748,
            0.5461868958109559,
            0.6149301825993555,
            0.6310418904403867,
            0.5741138560687433,
            0.541890440386681,
            0.5537056928034372,
            0.6036519871106337,
            0.6192266380236305,
            0.5359828141783028,
            0.5268528464017186,
            0.5461868958109559,
            0.5665950590762621,
            0.5279269602577873,
            0.5247046186895811,
            0.527389903329753,
            0.5784103114930182,
            0.5553168635875403,
            0.579484425349087,
            0.6106337271750806,
            0.5864661654135338
        ],
        "train_loss": [
            0.48609571903944016,
            0.25374151952564716,
            0.21170654334127903,
            0.1811267090961337,
            0.16175543423742056,
            0.14370731636881828,
            0.11549015156924725,
            0.09174482617527246,
            0.09644531086087227,
            0.08259704522788525,
            0.10048541286960244,
            0.1118672201409936,
            0.08482556324452162,
            0.06573642045259476,
            0.06279327301308513,
            0.09227304626256227,
            0.06792335119098425,
            0.07131047919392586,
            0.056704415474087,
            0.056157178012654185,
            0.07848829822614789,
            0.07681771600618958,
            0.06806066446006298,
            0.040768586564809084,
            0.064139514695853,
            0.06704958016052842,
            0.05021370085887611,
            0.04855880583636463,
            0.07345635024830699,
            0.08294609910808504,
            0.05663456581532955,
            0.08733711205422878,
            0.07586337765678763,
            0.05310747213661671,
            0.08229535771533847
        ],
        "test_loss": [
            6.8368861079216,
            2.0477059930562973,
            13.868864893913269,
            2.7789677381515503,
            0.8686961755156517,
            3.1462216079235077,
            3.7590430974960327,
            5.111742913722992,
            11.361741423606873,
            1.5111300349235535,
            1.9146026372909546,
            1.4622722119092941,
            1.9037549793720245,
            2.5609516203403473,
            2.793458431959152,
            1.6053916811943054,
            1.1523975133895874,
            0.8896675854921341,
            1.6182973384857178,
            2.5335240960121155,
            1.9109114557504654,
            0.9946725517511368,
            0.7195083945989609,
            1.7564776241779327,
            1.9958159178495407,
            1.7447286546230316,
            1.6499063074588776,
            2.046085551381111,
            2.183880463242531,
            1.6335191279649734,
            2.3570550978183746,
            3.8388092517852783,
            1.4470317214727402,
            0.8731045350432396,
            1.5415440797805786
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "UnfrozenPretrainedDenseNet121",
        "model": "UnfrozenPretrainedDenseNet121(\n  (model): DenseNet(\n    (features): Sequential(\n      (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu0): ReLU(inplace=True)\n      (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (denseblock1): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition1): _Transition(\n        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock2): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition2): _Transition(\n        (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock3): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer17): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer18): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer19): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer20): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer21): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer22): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer23): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer24): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition3): _Transition(\n        (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock4): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (classifier): Sequential(\n      (0): Linear(in_features=1024, out_features=1, bias=True)\n      (1): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.8461162677088422,
            0.9379579872984856,
            0.9516365412799218,
            0.953590620420127,
            0.9609184171958964,
            0.9579872984855886,
            0.9697117733268197,
            0.978505129457743,
            0.9829018075232047,
            0.9872984855886663,
            0.9858329262335125,
            0.9789936492427943,
            0.9833903273082559,
            0.9863214460185638,
            0.9877870053737177,
            0.9789936492427943,
            0.9770395701025891,
            0.9858329262335125,
            0.9833903273082559,
            0.9819247679531021,
            0.9838788470933073,
            0.9731314118221788,
            0.9706888128969223,
            0.9794821690278456,
            0.9858329262335125,
            0.9887640449438202,
            0.9882755251587689,
            0.9912066438690766,
            0.9833903273082559,
            0.979970688812897,
            0.979970688812897,
            0.979970688812897,
            0.9887640449438202,
            0.9858329262335125,
            0.9902296042989741
        ],
        "test_acc": [
            0.5714285714285714,
            0.6944146079484426,
            0.5547798066595059,
            0.7293233082706767,
            0.7099892588614393,
            0.5966702470461869,
            0.6552094522019334,
            0.6450053705692803,
            0.7545649838882922,
            0.7755102040816326,
            0.7986036519871106,
            0.7352309344790547,
            0.7212674543501612,
            0.541890440386681,
            0.640171858216971,
            0.5800214822771214,
            0.7980665950590763,
            0.7653061224489796,
            0.6879699248120301,
            0.6439312567132116,
            0.7771213748657357,
            0.7234156820622986,
            0.7169709989258861,
            0.6616541353383458,
            0.7073039742212675,
            0.7024704618689581,
            0.5569280343716434,
            0.5886143931256713,
            0.6809881847475833,
            0.6482277121374865,
            0.677765843179377,
            0.617078410311493,
            0.5961331901181526,
            0.5520945220193341,
            0.5365198711063373
        ],
        "train_loss": [
            0.32771857269108295,
            0.17430646158754826,
            0.11575284879654646,
            0.12421042378991842,
            0.09703298285603523,
            0.10077836597338319,
            0.08644284680485725,
            0.06158803449943662,
            0.045223738299682736,
            0.03680216777138412,
            0.03752893349155784,
            0.05265952553600073,
            0.051945777609944344,
            0.04367507970891893,
            0.039722652174532413,
            0.06750951800495386,
            0.05553209502249956,
            0.04501006845384836,
            0.04991189809516072,
            0.047071513487026095,
            0.04353391285985708,
            0.06571133201941848,
            0.08199261641129851,
            0.05621011136099696,
            0.040187065256759524,
            0.03347952594049275,
            0.038075997261330485,
            0.02660612773615867,
            0.03320775111205876,
            0.04508748883381486,
            0.06218195194378495,
            0.05715028103441,
            0.03969566244632006,
            0.03800754458643496,
            0.028578513069078326
        ],
        "test_loss": [
            0.7970166653394699,
            0.7106006443500519,
            1.2688751965761185,
            0.589118417352438,
            0.6801572293043137,
            1.3208847343921661,
            1.370315670967102,
            1.3224629163742065,
            0.7167375013232231,
            0.7014972046017647,
            0.6126798242330551,
            0.9831958264112473,
            0.8527928292751312,
            2.3097341656684875,
            1.1797344088554382,
            1.7315086126327515,
            0.5526728965342045,
            0.7519418448209763,
            1.0253834649920464,
            1.2397184073925018,
            0.6408964022994041,
            0.9006243124604225,
            0.8469172343611717,
            1.1115549132227898,
            0.9706299155950546,
            0.8530560433864594,
            1.675210863351822,
            1.074852742254734,
            0.8103803917765617,
            0.8011384382843971,
            0.8212048634886742,
            1.153154045343399,
            1.6342187970876694,
            2.1646979451179504,
            2.3752003759145737
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "BasicCNN",
        "model": "BasicCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=131072, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5378602833414753,
            0.6194430874450415,
            0.6658524670249145,
            0.701514411333659,
            0.7039570102589154,
            0.7269174401563263,
            0.7010258915486077,
            0.7107962872496336,
            0.7005373717635565,
            0.7274059599413776,
            0.7132388861748901,
            0.7132388861748901,
            0.7405959941377626,
            0.7283829995114802,
            0.7508549096238397,
            0.7542745481191988,
            0.7474352711284807,
            0.7420615534929165,
            0.734733756717147,
            0.7449926722032242,
            0.7410845139228138,
            0.7625793844650708,
            0.7498778700537372,
            0.7703957010258915,
            0.7567171470444553,
            0.7445041524181729,
            0.7313141182217879,
            0.7508549096238397,
            0.756228627259404,
            0.7572056668295066,
            0.761113825109917,
            0.776257938446507,
            0.7689301416707377,
            0.7508549096238397,
            0.7738153395212506
        ],
        "test_acc": [
            0.4833512352309345,
            0.5998925886143931,
            0.6423200859291085,
            0.5279269602577873,
            0.5955961331901182,
            0.5193340494092373,
            0.5547798066595059,
            0.6772287862513426,
            0.5204081632653061,
            0.6804511278195489,
            0.49785177228786254,
            0.6783029001074113,
            0.692266380236305,
            0.6707841031149302,
            0.7099892588614393,
            0.5343716433941997,
            0.533297529538131,
            0.5816326530612245,
            0.7116004296455424,
            0.7056928034371643,
            0.6874328678839957,
            0.518796992481203,
            0.6423200859291085,
            0.6680988184747583,
            0.6740064446831364,
            0.5182599355531686,
            0.5472610096670247,
            0.6831364124597207,
            0.644468313641246,
            0.6063372717508055,
            0.6595059076262084,
            0.5708915145005371,
            0.6852846401718582,
            0.5719656283566058,
            0.5241675617615468
        ],
        "train_loss": [
            14.52417229861021,
            4.457636445760727,
            2.342664584517479,
            1.5185273885726929,
            1.091206319630146,
            0.8175076395273209,
            0.7790498286485672,
            0.6588987931609154,
            0.7048858925700188,
            0.6216422766447067,
            0.6442708224058151,
            0.6685108616948128,
            0.5860906094312668,
            0.5863970443606377,
            0.5417792201042175,
            0.5522227883338928,
            0.5389831811189651,
            0.5687080472707748,
            0.5830129459500313,
            0.5890604592859745,
            0.5361361801624298,
            0.5268988832831383,
            0.5271325446665287,
            0.5228518508374691,
            0.5233106017112732,
            0.5468985661864281,
            0.5698221139609814,
            0.5567167028784752,
            0.540200162678957,
            0.5104200392961502,
            0.5100749880075455,
            0.4951167702674866,
            0.5170665718615055,
            0.5286004021763802,
            0.5008978843688965
        ],
        "test_loss": [
            2.7282005846500397,
            0.7156603187322617,
            0.6315386146306992,
            0.8322058245539665,
            0.6326441988348961,
            0.888807900249958,
            0.6540332287549973,
            0.6276648342609406,
            0.6936695948243141,
            0.6279219686985016,
            0.7280341237783432,
            0.6271782144904137,
            0.6251354441046715,
            0.6471051126718521,
            0.6327191889286041,
            0.6602863594889641,
            0.6559667736291885,
            0.6441366299986839,
            0.6324277743697166,
            0.6378201171755791,
            0.6410124078392982,
            0.7204073518514633,
            0.6552404835820198,
            0.6410834789276123,
            0.6487749516963959,
            0.6860813945531845,
            0.6602846905589104,
            0.6363773345947266,
            0.6537830382585526,
            0.647232361137867,
            0.652358666062355,
            0.6491230502724648,
            0.6500958278775215,
            0.6440717652440071,
            0.6624705791473389
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "BasicCNN",
        "model": "BasicCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=131072, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.4890083048363459,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583
        ],
        "test_acc": [
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373
        ],
        "train_loss": [
            39.52116784453392,
            52.513978481292725,
            52.51838254928589,
            52.51340436935425,
            52.512638092041016,
            52.51455307006836,
            52.51685094833374,
            52.513978481292725,
            52.51474475860596,
            52.51570177078247,
            52.516085147857666,
            52.51665925979614,
            52.516085147857666,
            52.51474475860596,
            52.51417016983032,
            52.51436138153076,
            52.51665925979614,
            52.51436138153076,
            52.51665925979614,
            52.513787269592285,
            52.513978481292725,
            52.5149359703064,
            52.516085147857666,
            52.5149359703064,
            52.51302099227905,
            52.51551055908203,
            52.51321268081665,
            52.515127658843994,
            52.5164680480957,
            52.51780843734741,
            52.515318870544434,
            52.51474475860596,
            52.51551055908203,
            52.51895713806152,
            52.51819133758545
        ],
        "test_loss": [
            48.6314172744751,
            47.7232141494751,
            48.2421875,
            47.46372747421265,
            47.46372747421265,
            47.333984375,
            48.11244440078735,
            47.8529577255249,
            47.98270082473755,
            47.59347105026245,
            48.2421875,
            47.20424127578735,
            48.371931076049805,
            47.8529577255249,
            48.11244440078735,
            47.8529577255249,
            48.11244440078735,
            47.7232141494751,
            47.98270082473755,
            48.2421875,
            47.59347105026245,
            47.07449769973755,
            47.59347105026245,
            48.89090394973755,
            47.20424127578735,
            47.07449769973755,
            47.20424127578735,
            47.8529577255249,
            48.7611608505249,
            48.6314172744751,
            48.11244440078735,
            47.46372747421265,
            48.6314172744751,
            47.7232141494751,
            47.8529577255249
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "CNNWithBatchNorm",
        "model": "CNNWithBatchNorm(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.4738641914997557,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583
        ],
        "test_acc": [
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373
        ],
        "train_loss": [
            40.98770821094513,
            52.51436138153076,
            52.515127658843994,
            52.51589345932007,
            52.51340436935425,
            52.51685094833374,
            52.51436138153076,
            52.51551055908203,
            52.512446880340576,
            52.51780843734741,
            52.51685094833374,
            52.51570177078247,
            52.516276359558105,
            52.51417016983032,
            52.51455307006836,
            52.51704216003418,
            52.51436138153076,
            52.515127658843994,
            52.51665925979614,
            52.51551055908203,
            52.51723384857178,
            52.51838254928589,
            52.5164680480957,
            52.513787269592285,
            52.5149359703064,
            52.5149359703064,
            52.5149359703064,
            52.51551055908203,
            52.51589345932007,
            52.516276359558105,
            52.51953172683716,
            52.51455307006836,
            52.51589345932007,
            52.515127658843994,
            52.517425537109375
        ],
        "test_loss": [
            48.2421875,
            47.98270082473755,
            47.59347105026245,
            48.371931076049805,
            47.20424127578735,
            47.8529577255249,
            48.6314172744751,
            47.7232141494751,
            48.7611608505249,
            48.11244440078735,
            47.20424127578735,
            47.46372747421265,
            48.371931076049805,
            47.7232141494751,
            49.150390625,
            48.50167417526245,
            48.11244440078735,
            47.59347105026245,
            48.371931076049805,
            48.89090394973755,
            48.50167417526245,
            47.46372747421265,
            48.371931076049805,
            48.371931076049805,
            47.8529577255249,
            47.333984375,
            46.8150110244751,
            48.11244440078735,
            47.7232141494751,
            47.98270082473755,
            47.7232141494751,
            49.280134201049805,
            47.20424127578735,
            48.2421875,
            47.8529577255249
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "CNNWithMoreFilters",
        "model": "CNNWithMoreFilters(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(64, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=1048576, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.4777723497801661,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583
        ],
        "test_acc": [
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373
        ],
        "train_loss": [
            46.113022930920124,
            52.51455307006836,
            52.51551055908203,
            52.51799964904785,
            52.516085147857666,
            52.515318870544434,
            52.51570177078247,
            52.5149359703064,
            52.51914882659912,
            52.51704216003418,
            52.51914882659912,
            52.51589345932007,
            52.513787269592285,
            52.51665925979614,
            52.51570177078247,
            52.517425537109375,
            52.51589345932007,
            52.51302099227905,
            52.51704216003418,
            52.51685094833374,
            52.51665925979614,
            52.5164680480957,
            52.518574237823486,
            52.516085147857666,
            52.5164680480957,
            52.51474475860596,
            52.51551055908203,
            52.516085147857666,
            52.51474475860596,
            52.51665925979614,
            52.516276359558105,
            52.51685094833374,
            52.517425537109375,
            52.51819133758545,
            52.51723384857178
        ],
        "test_loss": [
            48.371931076049805,
            48.2421875,
            47.333984375,
            47.98270082473755,
            48.11244440078735,
            48.2421875,
            47.98270082473755,
            48.6314172744751,
            48.371931076049805,
            47.8529577255249,
            47.46372747421265,
            47.7232141494751,
            47.98270082473755,
            47.46372747421265,
            48.7611608505249,
            47.98270082473755,
            48.89090394973755,
            47.7232141494751,
            47.8529577255249,
            48.50167417526245,
            48.371931076049805,
            48.11244440078735,
            47.98270082473755,
            49.280134201049805,
            48.50167417526245,
            48.89090394973755,
            47.46372747421265,
            47.333984375,
            47.59347105026245,
            48.371931076049805,
            47.59347105026245,
            47.59347105026245,
            48.50167417526245,
            48.2421875,
            48.7611608505249
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "FinalModel",
        "model": "FinalModel(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (6): Dropout2d(p=0.5, inplace=False)\n    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (8): ReLU()\n    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (11): Dropout2d(p=0.5, inplace=False)\n    (12): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (13): ReLU()\n    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (16): Dropout2d(p=0.5, inplace=False)\n    (17): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (18): ReLU()\n    (19): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (21): Dropout2d(p=0.5, inplace=False)\n    (22): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (23): ReLU()\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=16384, out_features=1024, bias=True)\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): LeakyReLU(negative_slope=0.1)\n    (3): Linear(in_features=1024, out_features=64, bias=True)\n    (4): ReLU()\n    (5): Linear(in_features=64, out_features=64, bias=True)\n    (6): ReLU()\n    (7): Linear(in_features=64, out_features=64, bias=True)\n    (8): LeakyReLU(negative_slope=0.1)\n    (9): Linear(in_features=64, out_features=1, bias=True)\n    (10): Sigmoid()\n  )\n)",
        "train_acc": [
            0.4855886663409868,
            0.5530043966780654,
            0.655105031753786,
            0.6824621397166585,
            0.7107962872496336,
            0.727894479726429,
            0.7205666829506595,
            0.7274059599413776,
            0.7352222765021983,
            0.7415730337078652,
            0.7401074743527113,
            0.7498778700537372,
            0.7508549096238397,
            0.7449926722032242,
            0.7523204689789936,
            0.7586712261846604,
            0.7620908646800195,
            0.7557401074743527,
            0.7513434294088911,
            0.7630679042501222,
            0.7630679042501222,
            0.7635564240351734,
            0.7586712261846604,
            0.7572056668295066,
            0.7557401074743527,
            0.7703957010258915,
            0.7616023448949683,
            0.7684416218856863,
            0.7591597459697118,
            0.7757694186614558,
            0.7743038593063019,
            0.789447972642892,
            0.7699071812408402,
            0.7650219833903273,
            0.7689301416707377
        ],
        "test_acc": [
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.5193340494092373,
            0.4881847475832438,
            0.6616541353383458,
            0.48120300751879697,
            0.617078410311493,
            0.5703544575725027,
            0.5193340494092373,
            0.5198711063372717,
            0.5166487647690655,
            0.5193340494092373,
            0.5193340494092373,
            0.518796992481203,
            0.5198711063372717,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5526315789473685,
            0.5177228786251342,
            0.5193340494092373,
            0.5193340494092373,
            0.523093447905478,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5171858216970999,
            0.5166487647690655,
            0.5193340494092373
        ],
        "train_loss": [
            0.7017316818237305,
            0.6813236847519875,
            0.6287757381796837,
            0.6102890372276306,
            0.5800369903445244,
            0.5677610337734222,
            0.5592202618718147,
            0.5442664697766304,
            0.5509770512580872,
            0.531772717833519,
            0.5374895110726357,
            0.529677152633667,
            0.5244275629520416,
            0.5310036167502403,
            0.5175908133387566,
            0.5162936635315418,
            0.5109576843678951,
            0.5132803954184055,
            0.5130762159824371,
            0.5002108626067638,
            0.5030144080519676,
            0.4910051040351391,
            0.5045607127249241,
            0.5246737338602543,
            0.5066897235810757,
            0.4871504120528698,
            0.5049930922687054,
            0.48753293231129646,
            0.5247739031910896,
            0.4950708672404289,
            0.48422815278172493,
            0.47430063411593437,
            0.49565543234348297,
            0.4987849183380604,
            0.49834540486335754
        ],
        "test_loss": [
            0.6948612406849861,
            0.7411243543028831,
            0.8339885100722313,
            0.9861950427293777,
            0.9966538697481155,
            0.7382879108190536,
            0.7021582648158073,
            0.6821991577744484,
            0.6900696903467178,
            0.6543370261788368,
            0.735665425658226,
            0.6335445493459702,
            0.6473972424864769,
            0.8769339472055435,
            0.8068149238824844,
            0.7528065666556358,
            1.0728112608194351,
            0.9008496329188347,
            1.0360059067606926,
            0.9057693928480148,
            1.0689512938261032,
            1.1455348134040833,
            0.8187132403254509,
            0.6823532730340958,
            0.9475298002362251,
            1.0524659678339958,
            1.2204653173685074,
            1.1439437121152878,
            1.0311156585812569,
            0.9535159096121788,
            1.0997311770915985,
            1.1315485537052155,
            1.0555323511362076,
            1.1973265558481216,
            1.3999198079109192
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "CNNWithBatchNorm",
        "model": "CNNWithBatchNorm(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5354176844162188,
            0.6326331216414265,
            0.638495359062042,
            0.6936980947728383,
            0.6907669760625306,
            0.7313141182217879,
            0.6853932584269663,
            0.726428920371275,
            0.7244748412310699,
            0.7103077674645824,
            0.7459697117733268,
            0.7669760625305325,
            0.7484123106985833,
            0.7552515876893015,
            0.7752808988764045,
            0.7806546165119688,
            0.8021494870542257,
            0.7454811919882756,
            0.7484123106985833,
            0.7884709330727895,
            0.7801660967269174,
            0.756228627259404,
            0.8050806057645334,
            0.8021494870542257,
            0.8133854421104054,
            0.8163165608207132,
            0.8202247191011236,
            0.802638006839277,
            0.8378114313629702,
            0.8280410356619443,
            0.8251099169516365,
            0.8353688324377138,
            0.8231558378114313,
            0.8055691255495847,
            0.8080117244748413
        ],
        "test_acc": [
            0.5005370569280344,
            0.4806659505907626,
            0.48281417830290013,
            0.625671321160043,
            0.4806659505907626,
            0.5580021482277121,
            0.5322234156820623,
            0.5193340494092373,
            0.5316863587540279,
            0.518796992481203,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5091299677765844,
            0.5499462943071965,
            0.6407089151450054,
            0.5193340494092373,
            0.48764769065520946,
            0.4924812030075188,
            0.4806659505907626,
            0.5762620837808807,
            0.518796992481203,
            0.6621911922663802,
            0.6342642320085929,
            0.5193340494092373,
            0.5247046186895811,
            0.5204081632653061,
            0.5327604726100966,
            0.5220193340494093,
            0.5214822771213748,
            0.5719656283566058,
            0.6595059076262084,
            0.5682062298603652,
            0.518796992481203,
            0.518796992481203
        ],
        "train_loss": [
            17.7635468095541,
            6.850069046020508,
            2.5652168095111847,
            1.5872483849525452,
            1.0819800049066544,
            0.6316611096262932,
            0.6871536076068878,
            0.7431157231330872,
            0.7392438352108002,
            0.6761513873934746,
            0.5563935674726963,
            0.5029373019933701,
            0.5462527312338352,
            0.5445703789591789,
            0.49923932552337646,
            0.4800402522087097,
            0.4397001825273037,
            0.5692802742123604,
            0.5563529133796692,
            0.500596210360527,
            0.4857817813754082,
            0.5661370642483234,
            0.4834100976586342,
            0.44925694167613983,
            0.43024643138051033,
            0.39751213788986206,
            0.3909505642950535,
            0.42317455634474754,
            0.39164479821920395,
            0.3858320191502571,
            0.3843175321817398,
            0.3674672544002533,
            0.40515148639678955,
            0.4463678039610386,
            0.4438353516161442
        ],
        "test_loss": [
            1.599198892712593,
            4.856793284416199,
            1.3189048320055008,
            0.6738227605819702,
            1.1232319921255112,
            0.6964326053857803,
            0.6712744683027267,
            1.0863071233034134,
            0.6822638809680939,
            0.7896474823355675,
            0.7930465340614319,
            0.9276683703064919,
            0.8853543847799301,
            0.7052183300256729,
            0.6686036139726639,
            0.6446541771292686,
            0.7939353734254837,
            0.7773491516709328,
            0.764612466096878,
            1.0000671967864037,
            0.6520991325378418,
            0.869397483766079,
            0.633309431374073,
            0.6465083211660385,
            1.1048633009195328,
            0.7391287237405777,
            0.7800048515200615,
            0.7159290388226509,
            0.7620199099183083,
            0.7541960403323174,
            0.6672753989696503,
            0.6366232112050056,
            0.6677494496107101,
            0.9434214755892754,
            0.9676338583230972
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "CNNWithAllRegularizations",
        "model": "CNNWithAllRegularizations(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): Dropout2d(p=0.5, inplace=False)\n    (8): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (9): ReLU()\n    (10): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Dropout1d(p=0.5, inplace=False)\n    (2): Sigmoid()\n  )\n)",
        "train_acc": [
            0.517342452369321,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5466536394723986,
            0.5168539325842697,
            0.5696140693698095,
            0.605276013678554,
            0.6033219345383488,
            0.6072300928187592,
            0.5872007816316561,
            0.6101612115290669,
            0.6355642403517342,
            0.618466047874939,
            0.6042989741084513,
            0.6111382510991695,
            0.6174890083048363,
            0.6013678553981436,
            0.600390815828041,
            0.6042989741084513,
            0.6116267708842208,
            0.6038104543234001,
            0.618466047874939,
            0.5842696629213483,
            0.6126038104543234,
            0.6189545676599902,
            0.578895945285784,
            0.6018563751831949,
            0.6204201270151442,
            0.5828041035661944,
            0.6140693698094772
        ],
        "test_acc": [
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.5048335123523093,
            0.5193340494092373,
            0.5155746509129968,
            0.5209452201933404,
            0.5193340494092373,
            0.518796992481203,
            0.5198711063372717,
            0.5193340494092373,
            0.5198711063372717,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.518796992481203,
            0.518796992481203,
            0.5193340494092373,
            0.5193340494092373,
            0.518796992481203,
            0.5193340494092373,
            0.5193340494092373,
            0.518796992481203,
            0.518796992481203,
            0.5193340494092373,
            0.518796992481203,
            0.5193340494092373,
            0.518796992481203,
            0.5193340494092373,
            0.518796992481203,
            0.518796992481203,
            0.518796992481203
        ],
        "train_loss": [
            17.679480150341988,
            23.706387519836426,
            22.77059292793274,
            24.050615072250366,
            23.476360321044922,
            22.709014892578125,
            23.924493551254272,
            21.859656810760498,
            16.48303782939911,
            21.63901674747467,
            12.822713673114777,
            11.22373640537262,
            11.9146169424057,
            12.86828076839447,
            12.895575046539307,
            11.591148138046265,
            8.891433298587799,
            9.630237877368927,
            10.135822772979736,
            10.084851741790771,
            8.664011180400848,
            10.29817008972168,
            10.367870450019836,
            8.343707025051117,
            9.816031336784363,
            9.787111341953278,
            8.088241398334503,
            10.457019448280334,
            8.107664346694946,
            9.514566540718079,
            10.908339619636536,
            7.11044842004776,
            7.590297520160675,
            10.086320161819458,
            7.853588581085205
        ],
        "test_loss": [
            7.545439839363098,
            5.712844550609589,
            3.4193716645240784,
            2.1278494596481323,
            1.0833151191473007,
            0.7026317492127419,
            0.9229616671800613,
            1.8840421438217163,
            3.036155641078949,
            11.323164165019989,
            17.112444162368774,
            20.170557260513306,
            18.96721315383911,
            6.0243266224861145,
            5.060157835483551,
            4.032867461442947,
            2.8359848856925964,
            2.2956033051013947,
            2.366158217191696,
            1.9542667716741562,
            1.5736526548862457,
            2.1370009183883667,
            1.3830925524234772,
            1.0113085806369781,
            1.9668308347463608,
            1.0908813327550888,
            1.3613357841968536,
            1.2309875935316086,
            0.9849975183606148,
            2.2124261409044266,
            1.5617088377475739,
            1.2054524719715118,
            2.526815354824066,
            2.2563140094280243,
            1.3993088901042938
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "CNNWithDropout",
        "model": "CNNWithDropout(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.6, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.6, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5148998534440645,
            0.4890083048363459,
            0.5007327796775769,
            0.5012212994626283,
            0.5183194919394235,
            0.5232046897899365,
            0.5261358085002442,
            0.5236932095749878,
            0.5261358085002442,
            0.5236932095749878,
            0.5295554469956033,
            0.5276013678553981,
            0.5319980459208598,
            0.524181729360039,
            0.5295554469956033,
            0.5427454811919883,
            0.5490962383976551,
            0.5461651196873474,
            0.5603321934538349,
            0.5554469956033219,
            0.5481191988275526,
            0.5534929164631167,
            0.5852467024914509,
            0.575476306790425,
            0.5730337078651685,
            0.5740107474352711,
            0.596971177332682,
            0.6082071323888617,
            0.6213971665852467,
            0.6365412799218368,
            0.6297020029311187,
            0.6380068392769908,
            0.6678065461651197,
            0.6609672691744015,
            0.6541279921836834
        ],
        "test_acc": [
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.48120300751879697,
            0.4817400644468314,
            0.48281417830290013,
            0.48872180451127817,
            0.4849624060150376,
            0.48388829215896884,
            0.4849624060150376
        ],
        "train_loss": [
            3.9765962660312653,
            0.7284006252884865,
            0.6966083869338036,
            0.6940180584788322,
            0.6946699544787407,
            0.6937204226851463,
            0.6920019835233688,
            0.6925716623663902,
            0.6905721500515938,
            0.6909487023949623,
            0.6887366473674774,
            0.6912586539983749,
            0.6881790012121201,
            0.6876206621527672,
            0.6852030977606773,
            0.6886462941765785,
            0.681343786418438,
            0.6837684363126755,
            0.6820977702736855,
            0.6841597333550453,
            0.6803908944129944,
            0.6720864921808243,
            0.6680990234017372,
            0.6812774166464806,
            0.6744613721966743,
            0.6757134273648262,
            0.660009928047657,
            0.6640321165323257,
            0.6582359001040459,
            0.6502082198858261,
            0.6377683505415916,
            0.6314609423279762,
            0.6075140312314034,
            0.6259252279996872,
            0.6214320659637451
        ],
        "test_loss": [
            0.6924035996198654,
            0.6927516162395477,
            0.6930044889450073,
            0.6933383867144585,
            0.6935258954763412,
            0.6938346475362778,
            0.6937663480639458,
            0.6942944899201393,
            0.6943525597453117,
            0.6953486353158951,
            0.6953042969107628,
            0.6958583816885948,
            0.6952471062541008,
            0.6955355256795883,
            0.6949691846966743,
            0.6941616162657738,
            0.6955378502607346,
            0.6946765631437302,
            0.6948496475815773,
            0.6943195685744286,
            0.6947280392050743,
            0.6947712823748589,
            0.6943137869238853,
            0.6944864392280579,
            0.6952510699629784,
            0.6948687434196472,
            0.6943288743495941,
            0.6941661834716797,
            0.6940537765622139,
            0.6953372359275818,
            0.6944323033094406,
            0.6933097541332245,
            0.6934972703456879,
            0.6939372569322586,
            0.6940591037273407
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "CNNWithMoreFilters",
        "model": "CNNWithMoreFilters(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(64, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=1048576, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.48314606741573035,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4748412310698583,
            0.4772838299951148,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417
        ],
        "test_acc": [
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.5193340494092373,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626
        ],
        "train_loss": [
            45.91477985680103,
            52.51799964904785,
            52.51455307006836,
            52.516276359558105,
            52.51417016983032,
            52.51665925979614,
            52.516276359558105,
            52.518574237823486,
            52.51704216003418,
            52.518574237823486,
            52.51589345932007,
            52.51685094833374,
            52.51704216003418,
            52.516085147857666,
            51.69637441635132,
            47.320937633514404,
            47.48506450653076,
            47.482383728027344,
            47.48640489578247,
            47.482192516326904,
            47.48429870605469,
            47.484681606292725,
            47.48391580581665,
            47.485830783843994,
            47.486979484558105,
            47.48257541656494,
            47.48410749435425,
            47.486021995544434,
            47.484681606292725,
            47.48410749435425,
            47.48544788360596,
            47.48429870605469,
            47.485830783843994,
            47.483150005340576,
            47.48161792755127
        ],
        "test_loss": [
            48.50167417526245,
            47.8529577255249,
            48.2421875,
            47.8529577255249,
            47.7232141494751,
            47.7232141494751,
            47.59347105026245,
            48.50167417526245,
            47.98270082473755,
            47.59347105026245,
            49.928850173950195,
            47.07449769973755,
            47.22272348403931,
            46.80124092102051,
            49.59567070007324,
            52.40652894973755,
            51.7578125,
            51.49832582473755,
            51.887556076049805,
            52.2767858505249,
            52.666015625,
            52.40652894973755,
            51.62806940078735,
            52.2767858505249,
            51.887556076049805,
            52.1470422744751,
            52.40652894973755,
            51.7578125,
            52.2767858505249,
            50.849609375,
            51.2388391494751,
            52.2767858505249,
            52.2767858505249,
            52.2767858505249,
            51.2388391494751
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.001
            }
        }
    },
    {
        "model_name": "CNNWithAllRegularizations",
        "model": "CNNWithAllRegularizations(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): Dropout2d(p=0.5, inplace=False)\n    (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): Dropout2d(p=0.5, inplace=False)\n    (8): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (9): ReLU()\n    (10): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Dropout1d(p=0.5, inplace=False)\n    (2): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417
        ],
        "test_acc": [
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626
        ],
        "train_loss": [
            18.930275544524193,
            23.531830072402954,
            23.85486912727356,
            23.489709854125977,
            25.69292116165161,
            24.372228145599365,
            24.329923391342163,
            23.941200256347656,
            23.259535551071167,
            24.21559476852417,
            24.08320951461792,
            25.736422777175903,
            23.224624633789062,
            23.668603658676147,
            24.26208233833313,
            24.497881650924683,
            22.72877335548401,
            23.727569580078125,
            24.36636781692505,
            23.827980041503906,
            23.88388729095459,
            24.104744911193848,
            24.135018348693848,
            23.08290457725525,
            23.3608558177948,
            23.970735549926758,
            22.322041749954224,
            24.07614493370056,
            22.94705033302307,
            24.514132261276245,
            23.06855034828186,
            23.59987235069275,
            22.590722799301147,
            24.651416063308716,
            24.40177869796753
        ],
        "test_loss": [
            7.675899505615234,
            11.796649694442749,
            12.67464005947113,
            12.707247495651245,
            12.32504689693451,
            11.97877585887909,
            12.131856083869934,
            11.598674058914185,
            11.731497764587402,
            11.1253000497818,
            11.275477886199951,
            10.861947655677795,
            10.789127826690674,
            10.600233435630798,
            10.596929430961609,
            9.925578117370605,
            10.15329396724701,
            9.845280528068542,
            9.46256422996521,
            9.386318922042847,
            9.444291472434998,
            9.596194624900818,
            9.177261233329773,
            8.991912722587585,
            8.603412210941315,
            8.166089236736298,
            7.603222727775574,
            7.408732056617737,
            7.013204097747803,
            6.992582142353058,
            6.762391149997711,
            6.693943679332733,
            6.666726231575012,
            6.348057568073273,
            6.34012496471405
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    },
    {
        "model_name": "FinalModel",
        "model": "FinalModel(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (6): Dropout2d(p=0.5, inplace=False)\n    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (8): ReLU()\n    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (11): Dropout2d(p=0.5, inplace=False)\n    (12): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (13): ReLU()\n    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (16): Dropout2d(p=0.5, inplace=False)\n    (17): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (18): ReLU()\n    (19): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (21): Dropout2d(p=0.5, inplace=False)\n    (22): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (23): ReLU()\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=16384, out_features=1024, bias=True)\n    (1): Dropout2d(p=0.5, inplace=False)\n    (2): LeakyReLU(negative_slope=0.1)\n    (3): Linear(in_features=1024, out_features=64, bias=True)\n    (4): ReLU()\n    (5): Linear(in_features=64, out_features=64, bias=True)\n    (6): ReLU()\n    (7): Linear(in_features=64, out_features=64, bias=True)\n    (8): LeakyReLU(negative_slope=0.1)\n    (9): Linear(in_features=64, out_features=1, bias=True)\n    (10): Sigmoid()\n  )\n)",
        "train_acc": [
            0.4704445530043967,
            0.4870542256961407,
            0.525647288715193,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.5251587689301417,
            0.525647288715193,
            0.5261358085002442,
            0.5271128480703469,
            0.5349291646311676,
            0.5481191988275526,
            0.5574010747435271,
            0.575476306790425,
            0.6057645334636053,
            0.6126038104543234,
            0.6375183194919394,
            0.6463116756228627,
            0.6687835857352222,
            0.673180263800684,
            0.6765999022960429,
            0.6853932584269663,
            0.6839276990718124
        ],
        "test_acc": [
            0.5193340494092373,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626,
            0.4806659505907626
        ],
        "train_loss": [
            0.6941613554954529,
            0.6932969093322754,
            0.6925390064716339,
            0.6921999156475067,
            0.6919462606310844,
            0.6920324265956879,
            0.6915615648031235,
            0.6917550340294838,
            0.6914386451244354,
            0.6915407851338387,
            0.6916675493121147,
            0.6912411451339722,
            0.6911286041140556,
            0.6913589462637901,
            0.6911008507013321,
            0.6909743770956993,
            0.6909049451351166,
            0.6904144510626793,
            0.6904177814722061,
            0.6897034645080566,
            0.689642421901226,
            0.6884997859597206,
            0.6884554475545883,
            0.6871824786067009,
            0.6863126903772354,
            0.6845784187316895,
            0.6818528026342392,
            0.6788036376237869,
            0.6734552681446075,
            0.6683389842510223,
            0.654196135699749,
            0.6397620663046837,
            0.6233560219407082,
            0.6080835461616516,
            0.5984060540795326
        ],
        "test_loss": [
            0.6930100470781326,
            0.6932729184627533,
            0.6941216513514519,
            0.6951397880911827,
            0.6958572342991829,
            0.6964661404490471,
            0.6955333948135376,
            0.695939414203167,
            0.6963946744799614,
            0.6965567022562027,
            0.6960892379283905,
            0.6962413489818573,
            0.6965367347002029,
            0.6962160542607307,
            0.6959885880351067,
            0.6967236921191216,
            0.6967582106590271,
            0.6977188363671303,
            0.6966868415474892,
            0.6979024484753609,
            0.6980004459619522,
            0.6971866190433502,
            0.6975633054971695,
            0.6991282775998116,
            0.6986102163791656,
            0.6977451667189598,
            0.7001154124736786,
            0.7024399861693382,
            0.7010537460446358,
            0.7035185620188713,
            0.7049979194998741,
            0.7154386416077614,
            0.7214833050966263,
            0.7342198938131332,
            0.7435912489891052
        ],
        "epochs": 35,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.sgd.SGD'>",
            "params": {
                "lr": 0.01,
                "momentum": 0.9,
                "weight_decay": 0.01
            }
        }
    }
]
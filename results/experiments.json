[
    {
        "model_name": "FrozenPretrainedVGG11",
        "description": "FrozenPretrainedVGG11",
        "timestamp": "2024-09-26 22:34:21.595397",
        "model": "FrozenPretrainedVGG11(\n  (model): VGG(\n    (features): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): ReLU(inplace=True)\n      (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (4): ReLU(inplace=True)\n      (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (6): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (7): ReLU(inplace=True)\n      (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (9): ReLU(inplace=True)\n      (10): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (11): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (12): ReLU(inplace=True)\n      (13): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (14): ReLU(inplace=True)\n      (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (16): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (17): ReLU(inplace=True)\n      (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (19): ReLU(inplace=True)\n      (20): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))\n    (classifier): Sequential(\n      (0): Linear(in_features=25088, out_features=4096, bias=True)\n      (1): ReLU(inplace=True)\n      (2): Dropout(p=0.5, inplace=False)\n      (3): Linear(in_features=4096, out_features=4096, bias=True)\n      (4): ReLU(inplace=True)\n      (5): Dropout(p=0.5, inplace=False)\n      (6): Linear(in_features=4096, out_features=1, bias=True)\n      (7): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.8607718612603811,
            0.9511480214948705,
            0.9863214460185638,
            0.9960918417195896,
            0.9995114802149487,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "test_acc": [
            0.8979591836734694,
            0.9140708915145005,
            0.916219119226638,
            0.9199785177228786,
            0.9146079484425349,
            0.9199785177228786,
            0.9167561761546724,
            0.9183673469387755,
            0.9156820622986036,
            0.9146079484425349,
            0.9124597207303974,
            0.9167561761546724,
            0.9151450053705693,
            0.9172932330827067,
            0.9172932330827067,
            0.9172932330827067,
            0.916219119226638,
            0.916219119226638,
            0.9156820622986036,
            0.916219119226638,
            0.9146079484425349,
            0.9156820622986036,
            0.9167561761546724,
            0.9167561761546724,
            0.916219119226638
        ],
        "train_loss": [
            0.3144257585518062,
            0.12471999536501244,
            0.04096852109069005,
            0.015105289581697434,
            0.004240916388880578,
            0.001481297708778584,
            0.000717233672958173,
            0.0005616174505576055,
            0.00032654140727572667,
            0.0003132884941123848,
            0.00020761216069331567,
            0.00014841286531463993,
            0.00013165562853600932,
            0.00011189278052370355,
            0.00013425096966557248,
            0.00014756433557749915,
            9.906018874517031e-05,
            9.647835591408693e-05,
            5.552163275979183e-05,
            6.760927357163382e-05,
            5.227879100289101e-05,
            6.030160344039359e-05,
            3.631801403969348e-05,
            3.3182986115321e-05,
            2.8837150608751472e-05
        ],
        "test_loss": [
            0.2777867278084159,
            0.23628420233726502,
            0.25822897274047135,
            0.35077932026858133,
            0.36478307631623463,
            0.3761280401435215,
            0.5254359812252611,
            0.5316629957999491,
            0.544872211470647,
            0.5550675484798072,
            0.5679969398467316,
            0.5635819478035652,
            0.5740570310052135,
            0.5746956287529126,
            0.5775805282396808,
            0.6236109059958835,
            0.6367390709395598,
            0.6373013328309753,
            0.6023517603670674,
            0.6506655570570729,
            0.6589175669698306,
            0.6600643252142617,
            0.65949683449835,
            0.6616289435661504,
            0.6613486017265434
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "FrozenPretrainedDenseNet121",
        "description": "FrozenPretrainedDenseNet121",
        "timestamp": "2024-09-26 22:36:52.226122",
        "model": "FrozenPretrainedDenseNet121(\n  (model): DenseNet(\n    (features): Sequential(\n      (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu0): ReLU(inplace=True)\n      (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (denseblock1): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition1): _Transition(\n        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock2): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition2): _Transition(\n        (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock3): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer17): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer18): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer19): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer20): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer21): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer22): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer23): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer24): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (transition3): _Transition(\n        (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock4): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        )\n      )\n      (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (classifier): Sequential(\n      (0): Linear(in_features=1024, out_features=1, bias=True)\n      (1): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.6209086468001954,
            0.7513434294088911,
            0.8094772838299951,
            0.8402540302882266,
            0.8456277479237909,
            0.8597948216902784,
            0.8637029799706888,
            0.873961895456766,
            0.8764044943820225,
            0.8808011724474841,
            0.8851978505129457,
            0.8949682462139716,
            0.8895945285784074,
            0.9003419638495359,
            0.8959452857840743,
            0.8998534440644846,
            0.9032730825598436,
            0.9047386419149975,
            0.9110893991206643,
            0.9154860771861261,
            0.9096238397655105,
            0.9110893991206643,
            0.920371275036639,
            0.920371275036639,
            0.9193942354665364
        ],
        "test_acc": [
            0.6879699248120301,
            0.7781954887218046,
            0.8163265306122449,
            0.835123523093448,
            0.8415682062298604,
            0.8485499462943072,
            0.8512352309344791,
            0.8566058002148228,
            0.8646616541353384,
            0.8668098818474759,
            0.8700322234156821,
            0.8732545649838883,
            0.8780880773361976,
            0.8748657357679914,
            0.8845327604726101,
            0.8877551020408163,
            0.8920515574650913,
            0.8925886143931256,
            0.8925886143931256,
            0.8947368421052632,
            0.8979591836734694,
            0.8995703544575725,
            0.9027926960257787,
            0.9044038668098818,
            0.9033297529538131
        ],
        "train_loss": [
            0.6595649681985378,
            0.5976388081908226,
            0.5488815875723958,
            0.5076045226305723,
            0.47467253915965557,
            0.44789168890565634,
            0.4224646659567952,
            0.3978939177468419,
            0.3818156635388732,
            0.3645953740924597,
            0.35101716592907906,
            0.33859142381697893,
            0.33126986026763916,
            0.3165472848340869,
            0.3072727764956653,
            0.3033052054233849,
            0.29330451507121325,
            0.28984424844384193,
            0.27691198233515024,
            0.2713451599702239,
            0.26826627319678664,
            0.26298757968470454,
            0.25265978928655386,
            0.2462245444767177,
            0.24855353636667132
        ],
        "test_loss": [
            0.6253417253494262,
            0.5717044621706009,
            0.5311547080675761,
            0.4920870790878932,
            0.4615021347999573,
            0.43665904104709624,
            0.41690005858739215,
            0.39629295468330383,
            0.3809474577506383,
            0.3658329447110494,
            0.3533934265375137,
            0.34187897940476736,
            0.3328565075993538,
            0.323617880543073,
            0.31399549295504886,
            0.3057312324643135,
            0.29727985213200253,
            0.2933472335338593,
            0.28730244437853497,
            0.28187800347805025,
            0.27683639377355573,
            0.2700490703185399,
            0.26566765606403353,
            0.2614918808142344,
            0.2578783561786016
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "FrozenPretrainedResNet18",
        "description": "FrozenPretrainedResNet18",
        "timestamp": "2024-09-26 22:39:23.087044",
        "model": "FrozenPretrainedResNet18(\n  (model): ResNet(\n    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (relu): ReLU(inplace=True)\n    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    (layer1): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer2): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer3): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (layer4): Sequential(\n      (0): BasicBlock(\n        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): BasicBlock(\n        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n    (fc): Sequential(\n      (0): Linear(in_features=512, out_features=1, bias=True)\n      (1): Sigmoid()\n    )\n  )\n)",
        "train_acc": [
            0.545676599902296,
            0.6673180263800684,
            0.7537860283341475,
            0.7992183683439179,
            0.8177821201758672,
            0.8382999511480215,
            0.8514899853444065,
            0.8544211040547142,
            0.8607718612603811,
            0.8617489008304836,
            0.8632144601856375,
            0.8685881778212018,
            0.873961895456766,
            0.8783585735222277,
            0.8768930141670738,
            0.8851978505129457,
            0.8851978505129457,
            0.8842208109428432,
            0.8891060087933561,
            0.8900830483634588,
            0.8964338055691256,
            0.8993649242794333,
            0.9013190034196384,
            0.8969223253541768,
            0.9022960429897411
        ],
        "test_acc": [
            0.6407089151450054,
            0.7271750805585392,
            0.776047261009667,
            0.7980665950590763,
            0.8147153598281418,
            0.8206229860365198,
            0.8259935553168636,
            0.8292158968850698,
            0.8383458646616542,
            0.8399570354457573,
            0.8453276047261009,
            0.8512352309344791,
            0.849624060150376,
            0.8576799140708915,
            0.8592910848549946,
            0.8609022556390977,
            0.864124597207304,
            0.8662728249194415,
            0.8694951664876477,
            0.8727175080558539,
            0.8780880773361976,
            0.8813104189044039,
            0.8813104189044039,
            0.8856068743286788,
            0.8856068743286788
        ],
        "train_loss": [
            0.6928610112518072,
            0.631051316857338,
            0.5800974015146494,
            0.5369839817285538,
            0.5022235382348299,
            0.47067949920892715,
            0.4461739808320999,
            0.4250033972784877,
            0.40524263214319944,
            0.39029902312904596,
            0.37747943960130215,
            0.3625209182500839,
            0.35140611976385117,
            0.34165697265416384,
            0.32856840547174215,
            0.31996977562084794,
            0.3146957983262837,
            0.3072278266772628,
            0.29967248532921076,
            0.2977532376535237,
            0.28516534762457013,
            0.28030565893277526,
            0.27633270248770714,
            0.2731108427979052,
            0.26588561199605465
        ],
        "test_loss": [
            0.6508683403333028,
            0.6000884234905243,
            0.5550335307916006,
            0.5227058708667756,
            0.49186596771081287,
            0.4655510693788528,
            0.44688920478026073,
            0.427696567773819,
            0.4118848542372386,
            0.3972659041484197,
            0.38441062271595,
            0.3746547887722651,
            0.3634439378976822,
            0.35392406086126965,
            0.34588559667269386,
            0.339848459760348,
            0.33087356835603715,
            0.3253267899155617,
            0.31956412543853124,
            0.3127048954367638,
            0.3080574164787928,
            0.3035745084285736,
            0.2971604426701864,
            0.2941387062271436,
            0.2894133264819781
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_Rotation_BaseCNN",
        "timestamp": "2024-09-27 00:01:07.444838",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6204201270151442,
            0.7352222765021983,
            0.7620908646800195,
            0.7821201758671226,
            0.7772349780166097,
            0.7772349780166097,
            0.7884709330727895,
            0.8114313629702002,
            0.7982413287738154,
            0.7997068881289692,
            0.8065461651196874,
            0.8153395212506106,
            0.8207132388861749,
            0.8124084025403029,
            0.8265754763067904,
            0.830972154372252,
            0.8295065950170982,
            0.8378114313629702,
            0.8397655105031754,
            0.8378114313629702,
            0.8417195896433806,
            0.8456277479237909,
            0.8539325842696629,
            0.8651685393258427,
            0.8607718612603811
        ],
        "test_acc": [
            0.6933404940923737,
            0.7303974221267454,
            0.7416756176154672,
            0.7626208378088077,
            0.7003222341568206,
            0.7599355531686359,
            0.7626208378088077,
            0.776047261009667,
            0.7712137486573577,
            0.7722878625134264,
            0.7835660580021482,
            0.7744360902255639,
            0.7792696025778733,
            0.780343716433942,
            0.7787325456498388,
            0.7814178302900108,
            0.7889366272824919,
            0.7819548872180451,
            0.790547798066595,
            0.7781954887218046,
            0.7867883995703545,
            0.7841031149301826,
            0.7867883995703545,
            0.7851772287862513,
            0.784640171858217
        ],
        "train_loss": [
            0.6420732224360108,
            0.5309130419045687,
            0.4985845070332289,
            0.47704219724982977,
            0.47266389802098274,
            0.46638257149606943,
            0.45343866664916277,
            0.4292030381038785,
            0.46151561941951513,
            0.4313461249694228,
            0.413285655900836,
            0.42564244754612446,
            0.41901664435863495,
            0.4053122936747968,
            0.3917852947488427,
            0.38518141955137253,
            0.3773463689722121,
            0.3711547181010246,
            0.3539517750032246,
            0.3646025052294135,
            0.363275027833879,
            0.34944000095129013,
            0.34017103305086493,
            0.33415095368400216,
            0.33093548752367496
        ],
        "test_loss": [
            0.6069948762655258,
            0.5360602955023448,
            0.5213701923688253,
            0.5220747609933217,
            0.5918932562073072,
            0.496783654888471,
            0.5045655171076456,
            0.4902453631162643,
            0.4815745741128922,
            0.4930202235778173,
            0.4664614021778107,
            0.48669833739598595,
            0.46815266062815986,
            0.48050741453965506,
            0.4774313529332479,
            0.46448771059513094,
            0.4772787645459175,
            0.47002039303382237,
            0.4791223059097926,
            0.4922202279170354,
            0.47923233012358346,
            0.47461519787708917,
            0.48249118228753407,
            0.4875356008609136,
            0.4753998110691706
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomRotation(degrees=[-30.0, 30.0], interpolation=nearest, expand=False, fill=0)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_Perspective_BaseCNN",
        "timestamp": "2024-09-27 00:07:09.802646",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6448461162677088,
            0.7274059599413776,
            0.7269174401563263,
            0.7537860283341475,
            0.7713727405959941,
            0.7816316560820713,
            0.782608695652174,
            0.7987298485588666,
            0.7923790913531998,
            0.8011724474841231,
            0.819247679531021,
            0.8177821201758672,
            0.8133854421104054,
            0.8295065950170982,
            0.8290180752320468,
            0.8343917928676111,
            0.8334147532975086,
            0.8461162677088422,
            0.84904738641915,
            0.8593063019052272,
            0.852467024914509,
            0.8651685393258427,
            0.8676111382510991,
            0.8422081094284318,
            0.857352222765022
        ],
        "test_acc": [
            0.7158968850698174,
            0.7212674543501612,
            0.7346938775510204,
            0.7325456498388829,
            0.7293233082706767,
            0.7567132116004296,
            0.7470461868958109,
            0.7593984962406015,
            0.7561761546723953,
            0.7653061224489796,
            0.7556390977443609,
            0.7749731471535983,
            0.7706766917293233,
            0.7755102040816326,
            0.7481203007518797,
            0.771750805585392,
            0.7808807733619764,
            0.7771213748657357,
            0.7755102040816326,
            0.7835660580021482,
            0.771750805585392,
            0.7830290010741139,
            0.776047261009667,
            0.7706766917293233,
            0.7841031149301826
        ],
        "train_loss": [
            0.6475109066814184,
            0.5607839431613684,
            0.5421506054699421,
            0.519347408786416,
            0.5049327705055475,
            0.4880911372601986,
            0.4683758523315191,
            0.45557497534900904,
            0.45296166464686394,
            0.4429092649370432,
            0.4064667420461774,
            0.4085705205798149,
            0.41511917393654585,
            0.3861048109829426,
            0.39241212233901024,
            0.37526048300787807,
            0.37329106591641903,
            0.363654300570488,
            0.3632888337597251,
            0.3426879392936826,
            0.33357397513464093,
            0.33040417404845357,
            0.314794163685292,
            0.35100654046982527,
            0.32994917407631874
        ],
        "test_loss": [
            0.5772606035073599,
            0.5506867915391922,
            0.5302969922622045,
            0.5313314487536748,
            0.52760950922966,
            0.5100708107153574,
            0.50485484401385,
            0.495802175005277,
            0.5213189939657847,
            0.5097638974587123,
            0.5124550630648931,
            0.4948770393927892,
            0.48975681761900586,
            0.4928718398014704,
            0.5336913069089254,
            0.4819902926683426,
            0.4909867902596792,
            0.48347545266151426,
            0.481134224931399,
            0.4872094993789991,
            0.5030148754517237,
            0.4801910360654195,
            0.5298822229107221,
            0.48976749926805496,
            0.5048874055345853
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomPerspective(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_Rotation_DropoutCNN",
        "timestamp": "2024-09-27 00:04:17.670440",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5891548607718613,
            0.7308255984367367,
            0.747923790913532,
            0.7513434294088911,
            0.767953102100635,
            0.7743038593063019,
            0.7821201758671226,
            0.764533463605276,
            0.7806546165119688,
            0.7870053737176356,
            0.7899364924279433,
            0.7933561309233024,
            0.8050806057645334,
            0.8011724474841231,
            0.8055691255495847,
            0.8089887640449438,
            0.8168050806057645,
            0.8221787982413288,
            0.8231558378114313,
            0.8099658036150464,
            0.8343917928676111,
            0.8329262335124572,
            0.8397655105031754,
            0.8382999511480215,
            0.8378114313629702
        ],
        "test_acc": [
            0.6911922663802363,
            0.7277121374865736,
            0.7443609022556391,
            0.7357679914070892,
            0.7508055853920516,
            0.757250268528464,
            0.7303974221267454,
            0.7610096670247046,
            0.7540279269602578,
            0.765843179377014,
            0.7599355531686359,
            0.7679914070891515,
            0.7771213748657357,
            0.7771213748657357,
            0.7798066595059077,
            0.7792696025778733,
            0.7765843179377014,
            0.7738990332975295,
            0.7653061224489796,
            0.776047261009667,
            0.7824919441460795,
            0.7712137486573577,
            0.7712137486573577,
            0.7798066595059077,
            0.7824919441460795
        ],
        "train_loss": [
            0.6536170598119497,
            0.5480541829019785,
            0.5128131033852696,
            0.5127210272476077,
            0.49493277352303267,
            0.4830694766715169,
            0.4632239630445838,
            0.48750821594148874,
            0.47548153065145016,
            0.4595839334651828,
            0.4551365217193961,
            0.4518056735396385,
            0.4283670838922262,
            0.42583885323256254,
            0.42928826063871384,
            0.4066416481509805,
            0.4126752810552716,
            0.39217448234558105,
            0.39514431450515985,
            0.4196629738435149,
            0.3754546446725726,
            0.38175205793231726,
            0.3687864104285836,
            0.3676386056467891,
            0.36368696577847004
        ],
        "test_loss": [
            0.6113684922456741,
            0.5691350241502126,
            0.5360084295272827,
            0.5365109662214915,
            0.5166555881500244,
            0.5185094137986501,
            0.560503717760245,
            0.5092607448498409,
            0.5088197807470958,
            0.49755368729432425,
            0.4974995414415995,
            0.49649622241655983,
            0.4939795990784963,
            0.4877309242884318,
            0.4835589865843455,
            0.4843661447366079,
            0.49483734369277954,
            0.4878459875782331,
            0.5004842688639959,
            0.47850578725337983,
            0.4820074995358785,
            0.5112707609931628,
            0.4825549234946569,
            0.4790179600318273,
            0.4851555675268173
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomRotation(degrees=[-30.0, 30.0], interpolation=nearest, expand=False, fill=0)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_Perspective_DropoutCNN",
        "timestamp": "2024-09-27 00:10:02.735657",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5974596971177333,
            0.7220322423058134,
            0.743038593063019,
            0.734733756717147,
            0.7518319491939424,
            0.7596482657547631,
            0.7655105031753786,
            0.7620908646800195,
            0.777723497801661,
            0.7713727405959941,
            0.7923790913531998,
            0.7953102100635075,
            0.8050806057645334,
            0.8031265266243283,
            0.7953102100635075,
            0.8216902784562775,
            0.8133854421104054,
            0.8197361993160723,
            0.8207132388861749,
            0.8363458720078163,
            0.8363458720078163,
            0.8236443575964827,
            0.8466047874938935,
            0.8451392281387397,
            0.8558866634098681
        ],
        "test_acc": [
            0.7148227712137487,
            0.7261009667024705,
            0.7255639097744361,
            0.7406015037593985,
            0.738453276047261,
            0.7212674543501612,
            0.682062298603652,
            0.738453276047261,
            0.7438238453276047,
            0.7508055853920516,
            0.7545649838882922,
            0.7610096670247046,
            0.7583243823845328,
            0.7577873254564984,
            0.7604726100966702,
            0.7626208378088077,
            0.7674543501611171,
            0.7604726100966702,
            0.7749731471535983,
            0.7679914070891515,
            0.7502685284640171,
            0.7744360902255639,
            0.7642320085929108,
            0.7701396348012889,
            0.7781954887218046
        ],
        "train_loss": [
            0.6628981605172157,
            0.5636331858113408,
            0.5371208731085062,
            0.5332112181931734,
            0.5095827775076032,
            0.5048605995252728,
            0.5128084886819124,
            0.5124682756140828,
            0.47427140548825264,
            0.4755529575049877,
            0.4696114854887128,
            0.43402338307350874,
            0.4371626880019903,
            0.4305338738486171,
            0.4462244641035795,
            0.41283652652055025,
            0.4085357440635562,
            0.4006933756172657,
            0.3962933914735913,
            0.3804685343056917,
            0.37095695082098246,
            0.38404648285359144,
            0.36173380073159933,
            0.35594611754640937,
            0.3431409588083625
        ],
        "test_loss": [
            0.5906308809916179,
            0.5488305161396663,
            0.536139260729154,
            0.5317842304706574,
            0.5266833752393723,
            0.5527992884318034,
            0.6003043363491695,
            0.524293698867162,
            0.5170469929774603,
            0.5212066789468129,
            0.5024018476406733,
            0.5108570242921512,
            0.5189514597256978,
            0.5042385419209798,
            0.5022924890120825,
            0.5024199962615967,
            0.4912955621878306,
            0.4987626274426778,
            0.4924470295508703,
            0.48739412824312844,
            0.5097068508466085,
            0.5001210898160935,
            0.5424692153930664,
            0.49633704622586566,
            0.48281490008036293
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomPerspective(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_HorizontalFlip_DropoutCNN",
        "timestamp": "2024-09-26 23:53:03.208284",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.618466047874939,
            0.7322911577918906,
            0.7542745481191988,
            0.7684416218856863,
            0.7757694186614558,
            0.7787005373717636,
            0.7957987298485588,
            0.7855398143624817,
            0.802638006839277,
            0.8089887640449438,
            0.802638006839277,
            0.8236443575964827,
            0.8255984367366879,
            0.8255984367366879,
            0.8319491939423547,
            0.8407425500732779,
            0.8368343917928676,
            0.8397655105031754,
            0.8392769907181241,
            0.8715192965315095,
            0.8627259404005863,
            0.8715192965315095,
            0.8646800195407914,
            0.8671226184660479,
            0.8876404494382022
        ],
        "test_acc": [
            0.7013963480128894,
            0.7303974221267454,
            0.7400644468313641,
            0.7502685284640171,
            0.7551020408163265,
            0.7636949516648764,
            0.7459720730397422,
            0.7497314715359829,
            0.7567132116004296,
            0.7325456498388829,
            0.765843179377014,
            0.7738990332975295,
            0.7744360902255639,
            0.7540279269602578,
            0.7765843179377014,
            0.7835660580021482,
            0.7765843179377014,
            0.7647690655209453,
            0.7593984962406015,
            0.7663802363050484,
            0.7685284640171858,
            0.7722878625134264,
            0.7851772287862513,
            0.7787325456498388,
            0.7728249194414608
        ],
        "train_loss": [
            0.6497298423200846,
            0.5373059315606952,
            0.501788972876966,
            0.48770903516560793,
            0.47131787426769733,
            0.46986202895641327,
            0.4452764489687979,
            0.4531019004061818,
            0.428315662778914,
            0.4263239223510027,
            0.42114187497645617,
            0.4007276901975274,
            0.39488303754478693,
            0.397218850441277,
            0.38715661177411675,
            0.3582812435925007,
            0.3785896049812436,
            0.3576838788576424,
            0.3689118158072233,
            0.3274569734930992,
            0.3270800281316042,
            0.3100327500142157,
            0.31799191795289516,
            0.30544102750718594,
            0.2794230985455215
        ],
        "test_loss": [
            0.6021051466464996,
            0.5425756106774012,
            0.5256610761086146,
            0.5154497385025024,
            0.5170850545167923,
            0.5033131659030914,
            0.5686674694220225,
            0.5282144521673521,
            0.5195981626709302,
            0.5716215446591377,
            0.4975971241792043,
            0.49239432712395986,
            0.4810628443956375,
            0.5452133938670158,
            0.4881486803293228,
            0.49385764002799987,
            0.4975519840915998,
            0.4886293311913808,
            0.4983883594473203,
            0.5122740646203359,
            0.4972624838352203,
            0.5158974672357242,
            0.49346977919340135,
            0.5007466266552607,
            0.5075649725894134
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_RandomErasing_BaseCNN",
        "timestamp": "2024-09-27 00:31:34.746696",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6438690766976063,
            0.7445041524181729,
            0.764533463605276,
            0.7703957010258915,
            0.7899364924279433,
            0.794333170493405,
            0.8045920859794822,
            0.8114313629702002,
            0.8231558378114313,
            0.8397655105031754,
            0.8436736687835857,
            0.8529555446995604,
            0.857352222765022,
            0.8641914997557401,
            0.844162188568637,
            0.8798241328773815,
            0.8920371275036639,
            0.9008304836345872,
            0.9057156814851002,
            0.9110893991206643,
            0.9159745969711773,
            0.9281875915974597,
            0.9291646311675623,
            0.9443087445041524,
            0.9516365412799218
        ],
        "test_acc": [
            0.7110633727175081,
            0.728249194414608,
            0.7073039742212675,
            0.7593984962406015,
            0.7567132116004296,
            0.7610096670247046,
            0.7561761546723953,
            0.7765843179377014,
            0.7749731471535983,
            0.7712137486573577,
            0.757250268528464,
            0.7663802363050484,
            0.7577873254564984,
            0.7744360902255639,
            0.7706766917293233,
            0.7712137486573577,
            0.7534908700322234,
            0.765843179377014,
            0.7706766917293233,
            0.7277121374865736,
            0.7647690655209453,
            0.765843179377014,
            0.7610096670247046,
            0.765843179377014,
            0.771750805585392
        ],
        "train_loss": [
            0.6353711299598217,
            0.5315890647470951,
            0.5033956486731768,
            0.496914635412395,
            0.4555402249097824,
            0.45202735159546137,
            0.4342357497662306,
            0.41423341259360313,
            0.41101167537271976,
            0.38067105785012245,
            0.3619867879897356,
            0.3488222653977573,
            0.3381028762087226,
            0.31450665509328246,
            0.3470552247017622,
            0.29424426425248384,
            0.27005681162700057,
            0.25170593382790685,
            0.23695111693814397,
            0.23147888900712132,
            0.20821210416033864,
            0.1874465139117092,
            0.1809670189395547,
            0.15108024864457548,
            0.13595695444382727
        ],
        "test_loss": [
            0.580958092212677,
            0.5406394739945729,
            0.5925446564952532,
            0.514086143175761,
            0.5203137954076131,
            0.52369151810805,
            0.5323282400767009,
            0.5014616350332896,
            0.4917126844326655,
            0.5287363708019257,
            0.5784394460419814,
            0.5754639084140459,
            0.5440613816181818,
            0.5789018556475639,
            0.5280382424592972,
            0.5794803927342097,
            0.651028037071228,
            0.5955204238494237,
            0.5980711678663889,
            0.6616067906220754,
            0.6858982861042022,
            0.6520639896392822,
            0.6806624948978424,
            0.707722869515419,
            0.7467248360315959
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_VerticalFlip_BaseCNN",
        "timestamp": "2024-09-26 23:55:31.296246",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6443575964826576,
            0.7440156326331216,
            0.7601367855398143,
            0.777723497801661,
            0.78114313629702,
            0.7938446507083536,
            0.797752808988764,
            0.8080117244748413,
            0.8075232046897899,
            0.8197361993160723,
            0.8104543234000977,
            0.8392769907181241,
            0.8436736687835857,
            0.8392769907181241,
            0.8500244259892525,
            0.8627259404005863,
            0.8578407425500733,
            0.8588177821201759,
            0.8680996580361504,
            0.8749389350268686,
            0.865657059110894,
            0.8768930141670738,
            0.8793356130923302,
            0.8935026868588177,
            0.9008304836345872
        ],
        "test_acc": [
            0.7126745435016112,
            0.7110633727175081,
            0.7481203007518797,
            0.7583243823845328,
            0.7636949516648764,
            0.7491944146079484,
            0.7583243823845328,
            0.7631578947368421,
            0.7636949516648764,
            0.771750805585392,
            0.780343716433942,
            0.765843179377014,
            0.7524167561761547,
            0.7690655209452202,
            0.7787325456498388,
            0.7728249194414608,
            0.7631578947368421,
            0.7631578947368421,
            0.771750805585392,
            0.765843179377014,
            0.771750805585392,
            0.7298603651987111,
            0.7701396348012889,
            0.7728249194414608,
            0.7685284640171858
        ],
        "train_loss": [
            0.6330178137868643,
            0.526700752787292,
            0.505177553743124,
            0.4775946568697691,
            0.4784924639388919,
            0.46030615363270044,
            0.44169628247618675,
            0.4279239447787404,
            0.431088212877512,
            0.4115735525265336,
            0.4184178914874792,
            0.3904393892735243,
            0.37524685822427273,
            0.37693312112241983,
            0.3554946049116552,
            0.34083776408806443,
            0.3414213005453348,
            0.3347507677972317,
            0.31944609014317393,
            0.31581573095172644,
            0.3044227762147784,
            0.30107938777655363,
            0.298286319244653,
            0.2616845965385437,
            0.2557589989155531
        ],
        "test_loss": [
            0.5845332314570745,
            0.5901749466856321,
            0.5293889005978902,
            0.5248157848914464,
            0.5150120963652929,
            0.5283325135707855,
            0.5079369594653448,
            0.5365919262170792,
            0.5125150561332703,
            0.5208645780881246,
            0.49203324715296426,
            0.49742746849854785,
            0.5357817692061265,
            0.4960704281926155,
            0.5164199660221735,
            0.5065087939302126,
            0.5285104682048162,
            0.5242923585077127,
            0.5280635327100753,
            0.512084054450194,
            0.5320720836520195,
            0.6065559834241867,
            0.5641156832377116,
            0.5613859710594018,
            0.5490297404428323
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomVerticalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutBatchNormCNN",
        "description": "BatchNormExp_DropoutBatchNormCNN",
        "timestamp": "2024-09-26 23:33:33.158459",
        "model": "DropoutBatchNormCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (6): Dropout2d(p=0.05, inplace=False)\n    (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (8): ReLU()\n    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (10): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (11): Dropout2d(p=0.05, inplace=False)\n    (12): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (13): ReLU()\n    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (15): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (16): Dropout2d(p=0.05, inplace=False)\n    (17): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (18): ReLU()\n    (19): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6580361504640938,
            0.7855398143624817,
            0.8299951148021495,
            0.8568637029799707,
            0.8720078163165608,
            0.8910600879335613,
            0.8764044943820225,
            0.9101123595505618,
            0.936980947728383,
            0.9462628236443575,
            0.9545676599902296,
            0.953590620420127,
            0.9623839765510503,
            0.9814362481680508,
            0.978505129457743,
            0.978505129457743,
            0.9848558866634098,
            0.9814362481680508,
            0.9921836834391793,
            0.9936492427943332,
            0.9960918417195896,
            0.9912066438690766,
            0.9965803615046409,
            0.9980459208597948,
            0.9975574010747436
        ],
        "test_acc": [
            0.6573576799140709,
            0.7303974221267454,
            0.7620837808807733,
            0.7712137486573577,
            0.7696025778732546,
            0.7771213748657357,
            0.7610096670247046,
            0.7636949516648764,
            0.7636949516648764,
            0.7583243823845328,
            0.7642320085929108,
            0.7685284640171858,
            0.7604726100966702,
            0.7722878625134264,
            0.7551020408163265,
            0.7583243823845328,
            0.761546723952739,
            0.7583243823845328,
            0.7663802363050484,
            0.761546723952739,
            0.7679914070891515,
            0.7647690655209453,
            0.7588614393125671,
            0.7690655209452202,
            0.7679914070891515
        ],
        "train_loss": [
            0.6932763159275055,
            0.47699529118835926,
            0.406188596971333,
            0.3583255619741976,
            0.31910261139273643,
            0.28620320558547974,
            0.2925876220688224,
            0.23760689375922084,
            0.20751630747690797,
            0.1834878798108548,
            0.16725636716000736,
            0.1577681463677436,
            0.1398274158127606,
            0.1121714545879513,
            0.10408845567144454,
            0.10008903779089451,
            0.09242014668416232,
            0.09434514073655009,
            0.06838269566651434,
            0.06126249430235475,
            0.05780398577917367,
            0.06554560968652368,
            0.04834416072117165,
            0.03988174127880484,
            0.04015707049984485
        ],
        "test_loss": [
            0.6136844287316005,
            0.542590911189715,
            0.5113150795300802,
            0.5084432075421016,
            0.5042261570692063,
            0.509675898651282,
            0.5496867353717486,
            0.5329038018981616,
            0.5492264648278554,
            0.5510926008224487,
            0.5461198054254055,
            0.5476348479588826,
            0.5598173459370931,
            0.5814200185239315,
            0.5993212660153707,
            0.568226769566536,
            0.600145127127568,
            0.5656179209550222,
            0.5980680932601293,
            0.5886217206716537,
            0.6144333024819691,
            0.5769622400403023,
            0.5846748903393746,
            0.6246282324194908,
            0.6368586967388788
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "MoreDropoutCNN",
        "description": "DropoutExp_MoreDropoutCNN",
        "timestamp": "2024-09-26 23:28:41.331430",
        "model": "MoreDropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.2, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.2, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.2, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.2, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5530043966780654,
            0.6966292134831461,
            0.73961895456766,
            0.7508549096238397,
            0.7620908646800195,
            0.7596482657547631,
            0.767953102100635,
            0.7816316560820713,
            0.7772349780166097,
            0.7914020517830972,
            0.7889594528578407,
            0.7953102100635075,
            0.8080117244748413,
            0.819247679531021,
            0.8153395212506106,
            0.824132877381534,
            0.8295065950170982,
            0.8334147532975086,
            0.84904738641915,
            0.8397655105031754,
            0.8510014655593552,
            0.8632144601856375,
            0.865657059110894,
            0.8641914997557401,
            0.8539325842696629
        ],
        "test_acc": [
            0.6949516648764769,
            0.7223415682062299,
            0.7309344790547798,
            0.7250268528464017,
            0.7261009667024705,
            0.7395273899033298,
            0.7411385606874329,
            0.738453276047261,
            0.7379162191192267,
            0.7545649838882922,
            0.7593984962406015,
            0.7459720730397422,
            0.7508055853920516,
            0.7314715359828142,
            0.7610096670247046,
            0.7631578947368421,
            0.7561761546723953,
            0.7679914070891515,
            0.7593984962406015,
            0.7583243823845328,
            0.7669172932330827,
            0.7540279269602578,
            0.7620837808807733,
            0.7255639097744361,
            0.7663802363050484
        ],
        "train_loss": [
            0.6818449404090643,
            0.5968019440770149,
            0.5362402349710464,
            0.5223238430917263,
            0.5089842090383172,
            0.5132624274119735,
            0.4859918635338545,
            0.47687019128352404,
            0.4682063106447458,
            0.4588588513433933,
            0.4684251844882965,
            0.4523403700441122,
            0.42895531095564365,
            0.41383704729378223,
            0.4267058614641428,
            0.39447268564254045,
            0.3799454402178526,
            0.37977212155237794,
            0.36456735525280237,
            0.35894470708444715,
            0.35051979776471853,
            0.32044453965499997,
            0.31448177341371775,
            0.3273087781853974,
            0.34525552671402693
        ],
        "test_loss": [
            0.6449074268341064,
            0.5585978657007218,
            0.5438624928394954,
            0.5400880724191666,
            0.546934665242831,
            0.5306881656249364,
            0.528564081589381,
            0.5252965211868286,
            0.5331666111946106,
            0.5227032432953517,
            0.5107838888963063,
            0.5253096888462703,
            0.5197916934887569,
            0.600368241717418,
            0.5226976578434308,
            0.5214940577745437,
            0.5440774530172348,
            0.545474382241567,
            0.5222810198863347,
            0.5363848467667898,
            0.5299576431512832,
            0.5591180711984635,
            0.5573849926392237,
            0.6099784294764201,
            0.5190677096446356
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_VerticalFlip_DropoutCNN",
        "timestamp": "2024-09-26 23:57:57.885046",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6199316072300928,
            0.7464582315583781,
            0.7484123106985833,
            0.7591597459697118,
            0.7669760625305325,
            0.7855398143624817,
            0.7835857352222765,
            0.7953102100635075,
            0.8094772838299951,
            0.802638006839277,
            0.8119198827552516,
            0.8080117244748413,
            0.8094772838299951,
            0.824132877381534,
            0.8270639960918417,
            0.8382999511480215,
            0.827552515876893,
            0.8368343917928676,
            0.8558866634098681,
            0.8299951148021495,
            0.8578407425500733,
            0.8583292623351245,
            0.8666340986809966,
            0.8563751831949193,
            0.8734733756717147
        ],
        "test_acc": [
            0.7062298603651987,
            0.7056928034371643,
            0.7325456498388829,
            0.7443609022556391,
            0.7481203007518797,
            0.7604726100966702,
            0.7491944146079484,
            0.765843179377014,
            0.7663802363050484,
            0.7647690655209453,
            0.7529538131041891,
            0.7669172932330827,
            0.7604726100966702,
            0.7631578947368421,
            0.7690655209452202,
            0.7551020408163265,
            0.7696025778732546,
            0.7722878625134264,
            0.7706766917293233,
            0.7685284640171858,
            0.7701396348012889,
            0.7631578947368421,
            0.7642320085929108,
            0.7518796992481203,
            0.7636949516648764
        ],
        "train_loss": [
            0.6460005398839712,
            0.5312727717682719,
            0.5183565625920892,
            0.508218658156693,
            0.4914831379428506,
            0.4705507168546319,
            0.46991627663373947,
            0.45557934883981943,
            0.43775565922260284,
            0.44853945448994637,
            0.4315190128982067,
            0.43231289088726044,
            0.4176652953028679,
            0.4015296082943678,
            0.3995320815593004,
            0.38623290974646807,
            0.3914652578532696,
            0.3752221744507551,
            0.3545970721170306,
            0.3764102612622082,
            0.3360841888934374,
            0.3418201436288655,
            0.33129413332790136,
            0.3267476432956755,
            0.31201334251090884
        ],
        "test_loss": [
            0.5914366980393727,
            0.5807934015989303,
            0.5391974846522013,
            0.5263690908749898,
            0.5190381030241649,
            0.5070123761892319,
            0.5280828952789307,
            0.5006159315506618,
            0.5075954457124074,
            0.5022706975539525,
            0.5418705080946287,
            0.5045998066663742,
            0.49574268609285355,
            0.4909418667356173,
            0.48887000580628714,
            0.5255081993838151,
            0.5019525239864985,
            0.5043067668875059,
            0.5012006213267645,
            0.5149796923001607,
            0.5318397109707197,
            0.516688127319018,
            0.5349718893567721,
            0.5240246879557768,
            0.5502017711599668
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomVerticalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_RandomErasing_DropoutCNN",
        "timestamp": "2024-09-27 00:34:02.757312",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6414264777723497,
            0.7269174401563263,
            0.7459697117733268,
            0.7542745481191988,
            0.7635564240351734,
            0.7752808988764045,
            0.7757694186614558,
            0.7948216902784563,
            0.8050806057645334,
            0.8119198827552516,
            0.8290180752320468,
            0.8436736687835857,
            0.8466047874938935,
            0.8485588666340986,
            0.8685881778212018,
            0.8778700537371763,
            0.873961895456766,
            0.898876404494382,
            0.9013190034196384,
            0.9130434782608695,
            0.9125549584758182,
            0.923790913531998,
            0.9184171958964338,
            0.9306301905227161,
            0.9467513434294089
        ],
        "test_acc": [
            0.677765843179377,
            0.7158968850698174,
            0.7228786251342643,
            0.7110633727175081,
            0.7395273899033298,
            0.7448979591836735,
            0.7277121374865736,
            0.7599355531686359,
            0.7357679914070892,
            0.765843179377014,
            0.761546723952739,
            0.757250268528464,
            0.7567132116004296,
            0.7588614393125671,
            0.7647690655209453,
            0.7567132116004296,
            0.7540279269602578,
            0.7561761546723953,
            0.7545649838882922,
            0.7534908700322234,
            0.757250268528464,
            0.7508055853920516,
            0.7685284640171858,
            0.7679914070891515,
            0.7593984962406015
        ],
        "train_loss": [
            0.6417260374873877,
            0.5501982131972909,
            0.5265704626217484,
            0.5057615302503109,
            0.49975256621837616,
            0.48848583083599806,
            0.47277896106243134,
            0.45667678490281105,
            0.4318214226514101,
            0.41688521672040224,
            0.39950767904520035,
            0.3703686613589525,
            0.3574386006221175,
            0.3413436124101281,
            0.31171102449297905,
            0.2951049036346376,
            0.2860961318947375,
            0.2531487909145653,
            0.24861355544999242,
            0.20525980414822698,
            0.20796475000679493,
            0.20018161227926612,
            0.19767934689298272,
            0.17365246126428246,
            0.14337078831158578
        ],
        "test_loss": [
            0.6039074391126633,
            0.5481086224317551,
            0.558761257926623,
            0.5653648833433788,
            0.5554826925198237,
            0.5391703854004543,
            0.5560269912083944,
            0.5195796936750412,
            0.5683774533371131,
            0.5089377959569296,
            0.5190138846635819,
            0.5285074636340141,
            0.5542274455229441,
            0.5380988011757533,
            0.5493921160697937,
            0.5797373414039612,
            0.5916553090016047,
            0.5901497701803843,
            0.5961207588513692,
            0.6558932254711787,
            0.6508548696835835,
            0.6773938467105229,
            0.6826471736033758,
            0.6865720361471176,
            0.7191509515047073
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "WeightDecayExp_DropoutCNN",
        "timestamp": "2024-09-26 23:45:41.990596",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5915974596971177,
            0.7352222765021983,
            0.7528089887640449,
            0.7650219833903273,
            0.7738153395212506,
            0.7830972154372252,
            0.8006839276990718,
            0.8128969223253542,
            0.8133854421104054,
            0.8251099169516365,
            0.824132877381534,
            0.8387884709330727,
            0.8436736687835857,
            0.8588177821201759,
            0.8744504152418173,
            0.8744504152418173,
            0.885686370297997,
            0.9032730825598436,
            0.8808011724474841,
            0.9208597948216902,
            0.923790913531998,
            0.9296531509526136,
            0.9379579872984856,
            0.9428431851489986,
            0.9501709819247679
        ],
        "test_acc": [
            0.6981740064446831,
            0.7223415682062299,
            0.7363050483351236,
            0.7266380236305048,
            0.7540279269602578,
            0.7110633727175081,
            0.7653061224489796,
            0.7470461868958109,
            0.7722878625134264,
            0.7690655209452202,
            0.7626208378088077,
            0.7647690655209453,
            0.7545649838882922,
            0.7781954887218046,
            0.7475832438238453,
            0.7653061224489796,
            0.7696025778732546,
            0.7518796992481203,
            0.7626208378088077,
            0.7722878625134264,
            0.7690655209452202,
            0.7663802363050484,
            0.7610096670247046,
            0.7379162191192267,
            0.7551020408163265
        ],
        "train_loss": [
            0.6632918193936348,
            0.5415780367329717,
            0.5146602466702461,
            0.4966178396716714,
            0.47978220973163843,
            0.47207270842045546,
            0.45576268434524536,
            0.427603411488235,
            0.41643167193979025,
            0.4051503837108612,
            0.40108819119632244,
            0.3650358119048178,
            0.3584929616190493,
            0.3309583170339465,
            0.30235031340271235,
            0.29610786866396666,
            0.28210117761045694,
            0.24689722061157227,
            0.2783741489984095,
            0.22403375804424286,
            0.20355689898133278,
            0.18381229881197214,
            0.1704310008790344,
            0.1606277646496892,
            0.14256594539619982
        ],
        "test_loss": [
            0.6073171158631643,
            0.5411127070585887,
            0.5352108865976334,
            0.5569984788695971,
            0.5202044596274694,
            0.5700575123230617,
            0.49964772363503773,
            0.5282933851083119,
            0.5081754351655642,
            0.5085617333650589,
            0.5060505032539367,
            0.5115803644061089,
            0.5200636506080627,
            0.5185519571105639,
            0.5694525241851807,
            0.5515098323424658,
            0.559456949432691,
            0.6610963687300682,
            0.559391458829244,
            0.5969622989495595,
            0.6220119814078013,
            0.6533514946699143,
            0.6844899202386538,
            0.6774325328568618,
            0.7533749212821325
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001,
                "weight_decay": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DropoutExp_DropoutCNN",
        "timestamp": "2024-09-26 23:26:16.147527",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6121152906692721,
            0.7508549096238397,
            0.7635564240351734,
            0.7669760625305325,
            0.7860283341475329,
            0.7860283341475329,
            0.8001954079140206,
            0.8148510014655593,
            0.8324377137274059,
            0.830972154372252,
            0.835857352222765,
            0.8426966292134831,
            0.8607718612603811,
            0.8666340986809966,
            0.8710307767464582,
            0.885686370297997,
            0.9003419638495359,
            0.907181240840254,
            0.912066438690767,
            0.9257449926722032,
            0.9355153883732291,
            0.9340498290180752,
            0.9345383488031265,
            0.9570102589154861,
            0.953590620420127
        ],
        "test_acc": [
            0.7099892588614393,
            0.7287862513426423,
            0.7379162191192267,
            0.7389903329752954,
            0.7336197636949516,
            0.7610096670247046,
            0.7604726100966702,
            0.7701396348012889,
            0.7642320085929108,
            0.7583243823845328,
            0.771750805585392,
            0.7642320085929108,
            0.7690655209452202,
            0.7626208378088077,
            0.7588614393125671,
            0.7610096670247046,
            0.7583243823845328,
            0.765843179377014,
            0.7642320085929108,
            0.7599355531686359,
            0.7491944146079484,
            0.7400644468313641,
            0.748657357679914,
            0.7636949516648764,
            0.7545649838882922
        ],
        "train_loss": [
            0.6504719685763121,
            0.530484632588923,
            0.5066561670973897,
            0.500126775354147,
            0.4719758490100503,
            0.46739795058965683,
            0.45179599337279797,
            0.4273993903771043,
            0.40317908115684986,
            0.3850855818018317,
            0.37135961931198835,
            0.3555787745863199,
            0.34045491786673665,
            0.31993555603548884,
            0.3058500215411186,
            0.27042963495478034,
            0.2517294455319643,
            0.23741231439635158,
            0.22953104646876454,
            0.211435908684507,
            0.18830538215115666,
            0.17143342574127018,
            0.17988814390264452,
            0.13347603753209114,
            0.13393542426638305
        ],
        "test_loss": [
            0.5968402564525604,
            0.542892320950826,
            0.5321820547183355,
            0.5392081677913666,
            0.5661773219704628,
            0.5082903444766999,
            0.5081374873717626,
            0.5090683569510778,
            0.495637113849322,
            0.5291505411267281,
            0.5009512374798457,
            0.5327613194783528,
            0.5265748495856921,
            0.5509406924247742,
            0.5343779563903809,
            0.5850745528936386,
            0.5710783789555232,
            0.6083551307519277,
            0.6383984436591467,
            0.6110464801390966,
            0.6538612961769104,
            0.796592753380537,
            0.7158012857039769,
            0.7553408791621526,
            0.7737141847610474
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "WeightDecayExp_BaseCNN",
        "timestamp": "2024-09-26 23:40:50.029836",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6121152906692721,
            0.7337567171470445,
            0.7664875427454811,
            0.7576941866145579,
            0.7860283341475329,
            0.8050806057645334,
            0.8148510014655593,
            0.8260869565217391,
            0.8426966292134831,
            0.8597948216902784,
            0.8578407425500733,
            0.877381533952125,
            0.8837322911577918,
            0.9018075232046898,
            0.9159745969711773,
            0.9306301905227161,
            0.9335613092330239,
            0.9482169027845627,
            0.9540791402051783,
            0.9677576941866145,
            0.9809477283829995,
            0.9824132877381534,
            0.9877870053737177,
            0.9819247679531021,
            0.9941377625793845
        ],
        "test_acc": [
            0.6766917293233082,
            0.7287862513426423,
            0.7470461868958109,
            0.7180451127819549,
            0.7395273899033298,
            0.7593984962406015,
            0.7610096670247046,
            0.7636949516648764,
            0.7647690655209453,
            0.7529538131041891,
            0.7588614393125671,
            0.7636949516648764,
            0.7583243823845328,
            0.7475832438238453,
            0.7631578947368421,
            0.761546723952739,
            0.7540279269602578,
            0.7443609022556391,
            0.7604726100966702,
            0.7545649838882922,
            0.7459720730397422,
            0.7432867883995704,
            0.7303974221267454,
            0.7346938775510204,
            0.7508055853920516
        ],
        "train_loss": [
            0.6478678751736879,
            0.5382622862234712,
            0.4998644655570388,
            0.4968030583113432,
            0.47229776717722416,
            0.443965726532042,
            0.4156688479706645,
            0.40015948191285133,
            0.36704089771956205,
            0.33543141884729266,
            0.33586955117061734,
            0.290059270337224,
            0.28254549158737063,
            0.2497116825543344,
            0.22017448651604354,
            0.19351459154859185,
            0.1800319910980761,
            0.14912896696478128,
            0.13990085618570447,
            0.11255165666807443,
            0.08568737586028874,
            0.07164083805400878,
            0.05885007802862674,
            0.061079772596713156,
            0.04007187974639237
        ],
        "test_loss": [
            0.6072038561105728,
            0.5489555180072785,
            0.537301171819369,
            0.5690251951416333,
            0.5258876572052638,
            0.5030417213837306,
            0.5108295679092407,
            0.5371228218078613,
            0.5322041283051173,
            0.5695448189973831,
            0.5239583527048429,
            0.551022270321846,
            0.5594625934958458,
            0.5830795387427012,
            0.6256532033284505,
            0.6328674669067065,
            0.640874054034551,
            0.7158493955930074,
            0.7248230655988057,
            0.7581924766302108,
            0.8416338165601095,
            0.8548870970805486,
            0.9513753036657969,
            0.9472556521495183,
            1.1790676405032476
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001,
                "weight_decay": 1e-05
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "WeightDecayExp_DropoutCNN",
        "timestamp": "2024-09-26 23:48:08.951135",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6326331216414265,
            0.7557401074743527,
            0.7547630679042501,
            0.7659990229604299,
            0.782608695652174,
            0.7909135319980459,
            0.8104543234000977,
            0.82266731802638,
            0.827552515876893,
            0.824132877381534,
            0.8270639960918417,
            0.8588177821201759,
            0.8593063019052272,
            0.8602833414753297,
            0.8700537371763556,
            0.8847093307278945,
            0.9057156814851002,
            0.9076697606253054,
            0.9208597948216902,
            0.9247679531021006,
            0.9301416707376648,
            0.9325842696629213,
            0.9350268685881779,
            0.9511480214948705,
            0.9599413776257938
        ],
        "test_acc": [
            0.7105263157894737,
            0.734156820622986,
            0.7330827067669173,
            0.7325456498388829,
            0.7266380236305048,
            0.7545649838882922,
            0.7642320085929108,
            0.7728249194414608,
            0.7669172932330827,
            0.761546723952739,
            0.7674543501611171,
            0.7647690655209453,
            0.7534908700322234,
            0.7309344790547798,
            0.765843179377014,
            0.7481203007518797,
            0.7551020408163265,
            0.748657357679914,
            0.7470461868958109,
            0.7411385606874329,
            0.7416756176154672,
            0.7185821697099892,
            0.7545649838882922,
            0.7416756176154672,
            0.7491944146079484
        ],
        "train_loss": [
            0.6341802310198545,
            0.5262703085318208,
            0.5244478611275554,
            0.49057394824922085,
            0.4794005723670125,
            0.46103436779230833,
            0.43603359162807465,
            0.4128021541982889,
            0.40387796610593796,
            0.39615269750356674,
            0.38935814145952463,
            0.34134034160524607,
            0.33425527485087514,
            0.31505146250128746,
            0.3082535872235894,
            0.2867168253287673,
            0.2517564878799021,
            0.23341787746176124,
            0.21410440420731902,
            0.2027099800761789,
            0.19505096063949168,
            0.1870280250441283,
            0.1710097985342145,
            0.1391798062250018,
            0.12475233932491392
        ],
        "test_loss": [
            0.5822545796632767,
            0.5544371902942657,
            0.5388716707626978,
            0.535537126660347,
            0.5498782972494761,
            0.5161247372627258,
            0.5086960385243098,
            0.5152380496263504,
            0.51149556239446,
            0.5107605308294296,
            0.5081816906730334,
            0.5282693341374397,
            0.5691461518406868,
            0.6540203957508007,
            0.5501925269762675,
            0.547575960556666,
            0.6342408115665118,
            0.6194837803641955,
            0.670311889052391,
            0.6759355495373408,
            0.6567397723595302,
            0.6986905167500178,
            0.7203566412130992,
            0.7115426629781723,
            0.811696258187294
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001,
                "weight_decay": 1e-05
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BatchNormCNN",
        "description": "BatchNormExp_BatchNormCNN",
        "timestamp": "2024-09-26 23:31:06.704484",
        "model": "BatchNormCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6487542745481192,
            0.7401074743527113,
            0.769418661455789,
            0.7743038593063019,
            0.794333170493405,
            0.8143624816805081,
            0.8163165608207132,
            0.8324377137274059,
            0.844162188568637,
            0.8475818270639961,
            0.8690766976062531,
            0.8676111382510991,
            0.8954567659990229,
            0.9081582804103566,
            0.9022960429897411,
            0.907181240840254,
            0.9340498290180752,
            0.9506595017098193,
            0.95847581827064,
            0.9614069369809477,
            0.9658036150464093,
            0.9716658524670249,
            0.9775280898876404,
            0.986809965803615,
            0.9794821690278456
        ],
        "test_acc": [
            0.7175080558539205,
            0.7346938775510204,
            0.751342642320086,
            0.7475832438238453,
            0.7604726100966702,
            0.7696025778732546,
            0.7685284640171858,
            0.7798066595059077,
            0.776047261009667,
            0.7261009667024705,
            0.7701396348012889,
            0.7631578947368421,
            0.7604726100966702,
            0.7599355531686359,
            0.7357679914070892,
            0.7604726100966702,
            0.7561761546723953,
            0.7738990332975295,
            0.7653061224489796,
            0.7599355531686359,
            0.7314715359828142,
            0.7470461868958109,
            0.7577873254564984,
            0.7508055853920516,
            0.7475832438238453
        ],
        "train_loss": [
            0.6262094713747501,
            0.5318587841466069,
            0.49592722672969103,
            0.4825469432398677,
            0.45885710418224335,
            0.4200262315571308,
            0.4146284721791744,
            0.38402205146849155,
            0.36618181271478534,
            0.34781621769070625,
            0.31476063933223486,
            0.30949357338249683,
            0.26512463577091694,
            0.23378091491758823,
            0.24137559346854687,
            0.22367478674277663,
            0.1883200667798519,
            0.15186435473151505,
            0.13663751492276788,
            0.12009730702266097,
            0.11340212868526578,
            0.09468091139569879,
            0.08128113753627986,
            0.05956432700622827,
            0.06350973481312394
        ],
        "test_loss": [
            0.5731538623571396,
            0.5337426066398621,
            0.5192162950833639,
            0.5222715338071188,
            0.5121653586626053,
            0.48852640589078267,
            0.4963872879743576,
            0.4891655271251996,
            0.4949465105930964,
            0.5832745561997096,
            0.5131906946500142,
            0.5142506579558055,
            0.5518091147144636,
            0.591543959081173,
            0.5985689421494802,
            0.565631914138794,
            0.6303359061479569,
            0.657374906539917,
            0.6791202336549759,
            0.7384668668111165,
            0.8341621081034343,
            0.7863238473733266,
            0.8034376194079716,
            0.9111200869083405,
            0.8805617898702621
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_GaussianBlur_BaseCNN",
        "timestamp": "2024-09-27 00:24:55.967367",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6497313141182218,
            0.747923790913532,
            0.7616023448949683,
            0.7703957010258915,
            0.7801660967269174,
            0.7967757694186615,
            0.8021494870542257,
            0.819247679531021,
            0.8363458720078163,
            0.8412310698583293,
            0.8568637029799707,
            0.8632144601856375,
            0.8641914997557401,
            0.8764044943820225,
            0.8954567659990229,
            0.9057156814851002,
            0.9149975574010747,
            0.9306301905227161,
            0.9394235466536395,
            0.9301416707376648,
            0.9511480214948705,
            0.95847581827064,
            0.9731314118221788,
            0.9780166096726918,
            0.9702002931118711
        ],
        "test_acc": [
            0.7271750805585392,
            0.7330827067669173,
            0.7298603651987111,
            0.7529538131041891,
            0.7346938775510204,
            0.7373791621911923,
            0.7583243823845328,
            0.7524167561761547,
            0.7561761546723953,
            0.7389903329752954,
            0.7508055853920516,
            0.7701396348012889,
            0.7406015037593985,
            0.757250268528464,
            0.7545649838882922,
            0.7175080558539205,
            0.7518796992481203,
            0.7432867883995704,
            0.7465091299677766,
            0.748657357679914,
            0.7540279269602578,
            0.7416756176154672,
            0.7465091299677766,
            0.738453276047261,
            0.7465091299677766
        ],
        "train_loss": [
            0.6267937161028385,
            0.530029603280127,
            0.49985909555107355,
            0.47974815778434277,
            0.47425134759396315,
            0.45214702747762203,
            0.4272327432408929,
            0.41760625690221786,
            0.3868511188775301,
            0.3730128426104784,
            0.3489217720925808,
            0.3148073246702552,
            0.31603654054924846,
            0.29678294667974114,
            0.26116348104551435,
            0.23946562921628356,
            0.23133574426174164,
            0.1944113210774958,
            0.16958115715533495,
            0.17154516000300646,
            0.1499257213436067,
            0.12105070217512548,
            0.10067763808183372,
            0.07967896549962461,
            0.08879478392191231
        ],
        "test_loss": [
            0.5686076203982036,
            0.5561814765135448,
            0.5451712807019552,
            0.5154837350050608,
            0.5486443956693013,
            0.5420223613580067,
            0.5106014798084895,
            0.5327638953924179,
            0.5220393359661102,
            0.5693469752868017,
            0.580926829079787,
            0.5849999929467837,
            0.5972011695305507,
            0.5827894906202952,
            0.6275318453709284,
            0.713702392578125,
            0.6509891885022322,
            0.7264555528759956,
            0.695932234575351,
            0.7498455385987958,
            0.7557172551751137,
            0.78194193529586,
            0.8702735429008802,
            0.8871666882187128,
            0.94892035163939
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    GaussianBlur(kernel_size=(9, 9), sigma=(0.1, 2.0))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "WeightDecayExp_DropoutCNN",
        "timestamp": "2024-09-26 23:43:15.428692",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.63019052271617,
            0.7357107962872497,
            0.7596482657547631,
            0.7708842208109429,
            0.7830972154372252,
            0.8006839276990718,
            0.7904250122129947,
            0.8050806057645334,
            0.8163165608207132,
            0.8280410356619443,
            0.8397655105031754,
            0.8456277479237909,
            0.8563751831949193,
            0.8593063019052272,
            0.8558866634098681,
            0.873961895456766,
            0.8812896922325354,
            0.8861748900830484,
            0.8993649242794333,
            0.9110893991206643,
            0.9130434782608695,
            0.9110893991206643,
            0.9296531509526136,
            0.940400586223742,
            0.9491939423546654
        ],
        "test_acc": [
            0.7051557465091299,
            0.7314715359828142,
            0.7406015037593985,
            0.7540279269602578,
            0.757250268528464,
            0.7019334049409237,
            0.761546723952739,
            0.751342642320086,
            0.7518796992481203,
            0.7690655209452202,
            0.7749731471535983,
            0.7685284640171858,
            0.7744360902255639,
            0.771750805585392,
            0.7588614393125671,
            0.7470461868958109,
            0.765843179377014,
            0.7712137486573577,
            0.7567132116004296,
            0.7438238453276047,
            0.7529538131041891,
            0.7314715359828142,
            0.7443609022556391,
            0.7540279269602578,
            0.7459720730397422
        ],
        "train_loss": [
            0.6492655389010906,
            0.5321331564337015,
            0.5089115742594004,
            0.4789509540423751,
            0.46318280417472124,
            0.4501330107450485,
            0.45684012304991484,
            0.43841269984841347,
            0.4196666106581688,
            0.4030617377720773,
            0.3763404404744506,
            0.36171228252351284,
            0.344813852570951,
            0.3351833363994956,
            0.3268713331781328,
            0.3096330380067229,
            0.2839540746062994,
            0.26941870898008347,
            0.2660887227393687,
            0.22890165587887168,
            0.22814555745571852,
            0.22226117039099336,
            0.19040552037768066,
            0.17000754992477596,
            0.14683270105160773
        ],
        "test_loss": [
            0.593146613240242,
            0.5397874236106872,
            0.5259495188792547,
            0.513141526778539,
            0.5095642179250717,
            0.6298319784303507,
            0.5150887211163838,
            0.5207815239826838,
            0.5382752070824305,
            0.5053375711043676,
            0.5252045780420304,
            0.5220034271478653,
            0.5240790635347367,
            0.5643267363309861,
            0.5491853008667628,
            0.594843136270841,
            0.5976238161325454,
            0.5682110061248143,
            0.5975068231423696,
            0.6317570487658183,
            0.6613167285919189,
            0.6441756109396617,
            0.7163420716921488,
            0.7015628437201182,
            0.7173010855913162
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001,
                "weight_decay": 0.001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "WeightDecayExp_BaseCNN",
        "timestamp": "2024-09-26 23:35:58.431077",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.633610161211529,
            0.7327796775769418,
            0.7474352711284807,
            0.767953102100635,
            0.7874938935026868,
            0.8001954079140206,
            0.8143624816805081,
            0.8182706399609184,
            0.8285295554469956,
            0.8392769907181241,
            0.8422081094284318,
            0.8597948216902784,
            0.8685881778212018,
            0.8808011724474841,
            0.8910600879335613,
            0.8939912066438691,
            0.9125549584758182,
            0.923790913531998,
            0.9408891060087934,
            0.953590620420127,
            0.9526135808500245,
            0.9570102589154861,
            0.95847581827064,
            0.9721543722520762,
            0.975085490962384
        ],
        "test_acc": [
            0.7089151450053706,
            0.6933404940923737,
            0.7287862513426423,
            0.742749731471536,
            0.7534908700322234,
            0.7454350161117078,
            0.7561761546723953,
            0.7368421052631579,
            0.7696025778732546,
            0.7255639097744361,
            0.7508055853920516,
            0.7475832438238453,
            0.7599355531686359,
            0.7497314715359829,
            0.7470461868958109,
            0.7529538131041891,
            0.7325456498388829,
            0.7481203007518797,
            0.7373791621911923,
            0.7551020408163265,
            0.7459720730397422,
            0.7234156820622986,
            0.7422126745435016,
            0.7325456498388829,
            0.7400644468313641
        ],
        "train_loss": [
            0.6564866919070482,
            0.5452868333086371,
            0.5202427254989743,
            0.4865655228495598,
            0.46872692089527845,
            0.448914535343647,
            0.4266406409442425,
            0.40911859925836325,
            0.38681562803685665,
            0.371013302821666,
            0.35936740366742015,
            0.3299401653930545,
            0.30628923512995243,
            0.2890047449618578,
            0.27141665015369654,
            0.2587211951613426,
            0.22415238851681352,
            0.21639542002230883,
            0.1813002300914377,
            0.15685051307082176,
            0.15036800131201744,
            0.13188572798389941,
            0.12345866463147104,
            0.09817256801761687,
            0.088794315000996
        ],
        "test_loss": [
            0.5906400670607884,
            0.5768892645835877,
            0.550943331917127,
            0.5420421888430913,
            0.5215537071228027,
            0.5166704754034678,
            0.5093175391356151,
            0.5543205897013347,
            0.5199408590793609,
            0.5746184274554252,
            0.5289663553237915,
            0.5849277963240941,
            0.5763315657774607,
            0.5716140429178874,
            0.7296862098077933,
            0.5907876188556354,
            0.6397748395800591,
            0.6443777707715829,
            0.653463210662206,
            0.7258872697750728,
            0.7473924120267232,
            0.7615019430716833,
            0.7986111621061961,
            0.8714080472787221,
            0.9097023705641428
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001,
                "weight_decay": 0.001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "WeightDecayExp_BaseCNN",
        "timestamp": "2024-09-26 23:38:24.218445",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6487542745481192,
            0.7454811919882756,
            0.756228627259404,
            0.7796775769418661,
            0.7933561309233024,
            0.8148510014655593,
            0.819247679531021,
            0.8128969223253542,
            0.8285295554469956,
            0.8495359062042013,
            0.8485588666340986,
            0.873961895456766,
            0.8895945285784074,
            0.8871519296531509,
            0.8915486077186126,
            0.9149975574010747,
            0.9159745969711773,
            0.920371275036639,
            0.9379579872984856,
            0.9408891060087934,
            0.9599413776257938,
            0.9633610161211529,
            0.9672691744015632,
            0.9653150952613581,
            0.9789936492427943
        ],
        "test_acc": [
            0.7250268528464017,
            0.7164339419978518,
            0.7363050483351236,
            0.7454350161117078,
            0.7647690655209453,
            0.7706766917293233,
            0.7636949516648764,
            0.734156820622986,
            0.7706766917293233,
            0.7599355531686359,
            0.7712137486573577,
            0.7465091299677766,
            0.7545649838882922,
            0.7620837808807733,
            0.7610096670247046,
            0.7588614393125671,
            0.7583243823845328,
            0.7534908700322234,
            0.7545649838882922,
            0.7545649838882922,
            0.7561761546723953,
            0.7508055853920516,
            0.7567132116004296,
            0.7524167561761547,
            0.7400644468313641
        ],
        "train_loss": [
            0.6311109829694033,
            0.5258530508726835,
            0.49462450109422207,
            0.4742427170276642,
            0.4469501180574298,
            0.4171783151105046,
            0.39892174396663904,
            0.40758880227804184,
            0.38418781105428934,
            0.34171530324965715,
            0.35031417943537235,
            0.300230800639838,
            0.28457639878615737,
            0.280144055839628,
            0.25780879240483046,
            0.2220362606458366,
            0.21824888698756695,
            0.20920504536479712,
            0.17421491630375385,
            0.16680594277568161,
            0.1314100434537977,
            0.12163354945369065,
            0.11175592662766576,
            0.10125940118450671,
            0.0779328407952562
        ],
        "test_loss": [
            0.5792654901742935,
            0.5501541296641032,
            0.537893807888031,
            0.5394820143779119,
            0.5130788673957188,
            0.513377594947815,
            0.5085262467463811,
            0.5694246917963028,
            0.5187180370092392,
            0.5220924029747646,
            0.5248064676920573,
            0.5597373376290004,
            0.5556905368963877,
            0.5863513161738714,
            0.586468139787515,
            0.6433568586905797,
            0.6538110246260961,
            0.6267344007889429,
            0.673964790503184,
            0.7238727907339731,
            0.7618564824263255,
            0.7557912617921829,
            0.8268777370452881,
            0.8422926783561706,
            0.8735114852587382
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001,
                "weight_decay": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_GaussianBlur_DropoutCNN",
        "timestamp": "2024-09-27 00:29:06.904464",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6160234489496824,
            0.7454811919882756,
            0.7586712261846604,
            0.767953102100635,
            0.7840742550073277,
            0.7928676111382511,
            0.8006839276990718,
            0.8070346849047386,
            0.8065461651196874,
            0.8304836345872008,
            0.830972154372252,
            0.8324377137274059,
            0.8612603810454323,
            0.8568637029799707,
            0.8607718612603811,
            0.8935026868588177,
            0.8935026868588177,
            0.9096238397655105,
            0.9174401563263312,
            0.9213483146067416,
            0.9281875915974597,
            0.9413776257938447,
            0.9472398632144602,
            0.9526135808500245,
            0.95847581827064
        ],
        "test_acc": [
            0.6906552094522019,
            0.7379162191192267,
            0.7432867883995704,
            0.7416756176154672,
            0.7524167561761547,
            0.7663802363050484,
            0.7653061224489796,
            0.761546723952739,
            0.761546723952739,
            0.7551020408163265,
            0.7626208378088077,
            0.7561761546723953,
            0.7475832438238453,
            0.7336197636949516,
            0.7357679914070892,
            0.7459720730397422,
            0.7218045112781954,
            0.7534908700322234,
            0.7277121374865736,
            0.7368421052631579,
            0.7438238453276047,
            0.7395273899033298,
            0.7303974221267454,
            0.7416756176154672,
            0.7352309344790547
        ],
        "train_loss": [
            0.6546955136582255,
            0.5375289656221867,
            0.5051570627838373,
            0.48864995408803225,
            0.475346090272069,
            0.46480589639395475,
            0.44353564362972975,
            0.4246744178235531,
            0.42026372998952866,
            0.38986296812072396,
            0.381244333460927,
            0.37558513879776,
            0.33283877559006214,
            0.3234025319106877,
            0.3098512068390846,
            0.2684139860793948,
            0.2603243147023022,
            0.2428649803623557,
            0.21433326415717602,
            0.20272814156487584,
            0.18910666881129146,
            0.1548925202805549,
            0.15071973227895796,
            0.1343677898403257,
            0.12152969278395176
        ],
        "test_loss": [
            0.6116159905989965,
            0.548150493701299,
            0.5277139236529668,
            0.5569799358646075,
            0.510481110215187,
            0.5193746626377106,
            0.5094624896844228,
            0.5095091680685679,
            0.5224475259582202,
            0.5648810118436813,
            0.5386480415860811,
            0.5512561440467835,
            0.565652749935786,
            0.6407288779815038,
            0.5624598999818166,
            0.6362287456790606,
            0.7424460038542747,
            0.6882937888304392,
            0.7867106636365254,
            0.7641704787810644,
            0.7853379825750987,
            0.8953995198011399,
            0.8166811178127925,
            0.8944614718357722,
            0.8378466407457987
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    GaussianBlur(kernel_size=(9, 9), sigma=(0.1, 2.0))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_HorizontalFlip_BaseCNN",
        "timestamp": "2024-09-26 23:50:36.792467",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6189545676599902,
            0.7420615534929165,
            0.7625793844650708,
            0.7782120175867122,
            0.7923790913531998,
            0.7997068881289692,
            0.8070346849047386,
            0.8153395212506106,
            0.8143624816805081,
            0.8285295554469956,
            0.8231558378114313,
            0.8382999511480215,
            0.8544211040547142,
            0.8597948216902784,
            0.8510014655593552,
            0.8495359062042013,
            0.8632144601856375,
            0.8685881778212018,
            0.8744504152418173,
            0.8764044943820225,
            0.8978993649242795,
            0.8847093307278945,
            0.9057156814851002,
            0.9081582804103566,
            0.9003419638495359
        ],
        "test_acc": [
            0.6949516648764769,
            0.734156820622986,
            0.7422126745435016,
            0.7502685284640171,
            0.7545649838882922,
            0.7561761546723953,
            0.7567132116004296,
            0.7690655209452202,
            0.7610096670247046,
            0.7696025778732546,
            0.7738990332975295,
            0.7653061224489796,
            0.7722878625134264,
            0.7738990332975295,
            0.7690655209452202,
            0.7636949516648764,
            0.7669172932330827,
            0.7712137486573577,
            0.7475832438238453,
            0.7733619763694952,
            0.7620837808807733,
            0.7674543501611171,
            0.7593984962406015,
            0.761546723952739,
            0.7325456498388829
        ],
        "train_loss": [
            0.6499289777129889,
            0.5296945450827479,
            0.49548286758363247,
            0.466324707493186,
            0.45377706084400415,
            0.439294770359993,
            0.42292698565870523,
            0.41399985272437334,
            0.39754588855430484,
            0.39231043588370085,
            0.3997972570359707,
            0.3709045238792896,
            0.3645723182708025,
            0.33605828369036317,
            0.3482656152918935,
            0.3306662472896278,
            0.32328592147678137,
            0.3004734180867672,
            0.29297304013743997,
            0.30300349462777376,
            0.2598789371550083,
            0.2907648477703333,
            0.2449580254033208,
            0.2363903052173555,
            0.24434915208257735
        ],
        "test_loss": [
            0.5960440129041672,
            0.5358913669983546,
            0.5296789199113846,
            0.5163343399763107,
            0.5310012469689052,
            0.5170509666204453,
            0.5121946146090826,
            0.49788408080736796,
            0.5345796684424082,
            0.5334465493758519,
            0.49280844430128734,
            0.5162368834018707,
            0.4971469879150391,
            0.5261601676543554,
            0.49446751525004706,
            0.5423351680239041,
            0.5045877536137898,
            0.5154397010803222,
            0.5795074556022882,
            0.5172302862008412,
            0.5798427949349085,
            0.5776344109326601,
            0.5492930541435878,
            0.6453070757289727,
            0.643009015917778
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_ColorJitter_DropoutCNN",
        "timestamp": "2024-09-27 00:20:43.189403",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5119687347337567,
            0.5852467024914509,
            0.6663409868099658,
            0.7020029311187103,
            0.7068881289692233,
            0.7298485588666341,
            0.7254518808011724,
            0.734733756717147,
            0.7371763556424035,
            0.7557401074743527,
            0.7542745481191988,
            0.7772349780166097,
            0.7703957010258915,
            0.7664875427454811,
            0.7772349780166097,
            0.7904250122129947,
            0.8080117244748413,
            0.8055691255495847,
            0.8041035661944309,
            0.8036150464093795,
            0.8099658036150464,
            0.8172936003908158,
            0.8373229115779189,
            0.8392769907181241,
            0.8617489008304836
        ],
        "test_acc": [
            0.5955961331901182,
            0.5907626208378088,
            0.7142857142857143,
            0.6992481203007519,
            0.7191192266380236,
            0.7293233082706767,
            0.7207303974221267,
            0.7330827067669173,
            0.7346938775510204,
            0.7346938775510204,
            0.7298603651987111,
            0.7389903329752954,
            0.7346938775510204,
            0.738453276047261,
            0.748657357679914,
            0.723952738990333,
            0.7352309344790547,
            0.7228786251342643,
            0.7191192266380236,
            0.7298603651987111,
            0.7250268528464017,
            0.7298603651987111,
            0.7180451127819549,
            0.7142857142857143,
            0.7320085929108485
        ],
        "train_loss": [
            0.6965405754745007,
            0.6668601986020803,
            0.6241307090967894,
            0.5764395454898477,
            0.5667557613924146,
            0.5433025239035487,
            0.5465737991034985,
            0.5279381908476353,
            0.5269380817189813,
            0.5183828324079514,
            0.5091580636799335,
            0.497954074293375,
            0.490338490344584,
            0.4826552653685212,
            0.4778225850313902,
            0.46856182534247637,
            0.42903237976133823,
            0.43178990110754967,
            0.42862430680543184,
            0.42898216750472784,
            0.41298773419111967,
            0.40091448090970516,
            0.37149159144610167,
            0.3534239111468196,
            0.33229257725179195
        ],
        "test_loss": [
            0.6843039353688558,
            0.6721350997686386,
            0.5772483686606089,
            0.5827880462010702,
            0.5617820590734481,
            0.5539741436640422,
            0.5536633133888245,
            0.5479058633248012,
            0.5478300561507543,
            0.5413682321707408,
            0.5539969623088836,
            0.544389404853185,
            0.5766233821709951,
            0.548691193262736,
            0.5388196011384329,
            0.5574298689762751,
            0.5477800359328587,
            0.6175543506940205,
            0.613174170255661,
            0.5767213354508082,
            0.5806128323078156,
            0.5768781175216039,
            0.5985351860523224,
            0.6258815541863442,
            0.6589962164560954
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    ColorJitter(brightness=(0.5, 1.5), contrast=(0.5, 1.5), saturation=(0.5, 1.5), hue=(-0.5, 0.5))\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "DeepDropoutCNN",
        "description": "DepthExp_DeepDropoutCNN",
        "timestamp": "2024-09-27 00:39:05.273081",
        "model": "DeepDropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (7): Dropout2d(p=0.05, inplace=False)\n    (8): ReLU()\n    (9): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (16): ReLU()\n    (17): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (18): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (19): Dropout2d(p=0.05, inplace=False)\n    (20): ReLU()\n    (21): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (22): ReLU()\n    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5803615046409379,
            0.7283829995114802,
            0.7449926722032242,
            0.7630679042501222,
            0.7630679042501222,
            0.7699071812408402,
            0.767953102100635,
            0.7738153395212506,
            0.7884709330727895,
            0.8094772838299951,
            0.819247679531021,
            0.8329262335124572,
            0.8231558378114313,
            0.8568637029799707,
            0.8612603810454323,
            0.8661455788959452,
            0.8832437713727406,
            0.9027845627747924,
            0.9115779189057157,
            0.9247679531021006,
            0.9364924279433317,
            0.9472398632144602,
            0.9501709819247679,
            0.975085490962384,
            0.9780166096726918
        ],
        "test_acc": [
            0.709452201933405,
            0.719656283566058,
            0.7201933404940923,
            0.7314715359828142,
            0.728249194414608,
            0.7346938775510204,
            0.7400644468313641,
            0.7379162191192267,
            0.7470461868958109,
            0.7599355531686359,
            0.7561761546723953,
            0.7626208378088077,
            0.7534908700322234,
            0.7647690655209453,
            0.7475832438238453,
            0.7642320085929108,
            0.751342642320086,
            0.7363050483351236,
            0.7481203007518797,
            0.738453276047261,
            0.7395273899033298,
            0.7475832438238453,
            0.7416756176154672,
            0.7218045112781954,
            0.7298603651987111
        ],
        "train_loss": [
            0.6732107438147068,
            0.5590242147445679,
            0.5368548715487123,
            0.5074075702577829,
            0.49275245517492294,
            0.48439563531428576,
            0.4856975534930825,
            0.47327614668756723,
            0.4516634214669466,
            0.4309000354260206,
            0.4112430578097701,
            0.38002852257341146,
            0.3818965572863817,
            0.3448248039931059,
            0.32479724986478686,
            0.31184837222099304,
            0.279323045630008,
            0.2479518298059702,
            0.22055355878546834,
            0.20212440378963947,
            0.1636395340319723,
            0.14244358823634684,
            0.12177350604906678,
            0.07451797998510301,
            0.06346516800113022
        ],
        "test_loss": [
            0.6231590270996094,
            0.5592090636491776,
            0.5622848212718964,
            0.5409410466750463,
            0.541571189959844,
            0.5282257467508316,
            0.532729368408521,
            0.5556225071350733,
            0.538313061495622,
            0.5390321150422096,
            0.5431092033783594,
            0.5142065405845642,
            0.5802092686295509,
            0.5696319272120793,
            0.5938451608022054,
            0.5794669069349766,
            0.6585802788535754,
            0.7761801449892421,
            0.7355685859918595,
            0.7412494188795488,
            0.8845343369990587,
            1.0928040038483837,
            1.195501745849227,
            1.426863005757332,
            1.7939149502975245
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_ColorJitter_BaseCNN",
        "timestamp": "2024-09-27 00:15:24.480202",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5329750854909624,
            0.6306790425012213,
            0.6956521739130435,
            0.7337567171470445,
            0.7225207620908647,
            0.7371763556424035,
            0.7532975085490963,
            0.7655105031753786,
            0.7591597459697118,
            0.769418661455789,
            0.7630679042501222,
            0.782608695652174,
            0.7909135319980459,
            0.794333170493405,
            0.7923790913531998,
            0.8036150464093795,
            0.8124084025403029,
            0.830972154372252,
            0.8304836345872008,
            0.8260869565217391,
            0.8378114313629702,
            0.8436736687835857,
            0.8549096238397655,
            0.8676111382510991,
            0.8690766976062531
        ],
        "test_acc": [
            0.5225563909774437,
            0.6390977443609023,
            0.7019334049409237,
            0.7185821697099892,
            0.7244897959183674,
            0.7287862513426423,
            0.719656283566058,
            0.7287862513426423,
            0.7368421052631579,
            0.7110633727175081,
            0.7234156820622986,
            0.7373791621911923,
            0.7255639097744361,
            0.7330827067669173,
            0.7465091299677766,
            0.7406015037593985,
            0.7373791621911923,
            0.7293233082706767,
            0.7309344790547798,
            0.7406015037593985,
            0.7416756176154672,
            0.7330827067669173,
            0.7175080558539205,
            0.7298603651987111,
            0.728249194414608
        ],
        "train_loss": [
            0.6870359312742949,
            0.6452239882200956,
            0.589601431041956,
            0.5531382206827402,
            0.5510451458394527,
            0.5345521094277501,
            0.5176232568919659,
            0.5159832192584872,
            0.5117773590609431,
            0.48083765618503094,
            0.49483213387429714,
            0.4791677175089717,
            0.46281861420720816,
            0.45247443579137325,
            0.4468137715011835,
            0.44750000163912773,
            0.41783621441572905,
            0.3846313748508692,
            0.3968337019905448,
            0.3869348056614399,
            0.3716039629653096,
            0.355013289488852,
            0.33906273590400815,
            0.31886590039357543,
            0.31388165010139346
        ],
        "test_loss": [
            0.6834657351175945,
            0.6340677579243977,
            0.5885430544614791,
            0.5744398593902588,
            0.5463602324326833,
            0.5636498202880224,
            0.5814789672692616,
            0.5505626132090886,
            0.534637842575709,
            0.5713308205207189,
            0.5724932630856832,
            0.5626588771740596,
            0.5540026366710663,
            0.5321892857551574,
            0.540944923957189,
            0.5421201646327972,
            0.5566039641698202,
            0.5663515895605087,
            0.5667169521252314,
            0.5577827135721842,
            0.5644567281007766,
            0.5882813314596812,
            0.6180442263682683,
            0.6127344956000645,
            0.5991985430320104
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    ColorJitter(brightness=(0.5, 1.5), contrast=(0.5, 1.5), saturation=(0.5, 1.5), hue=(-0.5, 0.5))\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "DeepCNN",
        "description": "DepthExp_DeepCNN",
        "timestamp": "2024-09-27 00:36:33.103141",
        "model": "DeepCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (6): ReLU()\n    (7): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (8): ReLU()\n    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (10): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (11): ReLU()\n    (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): ReLU()\n    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (15): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (16): ReLU()\n    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (18): ReLU()\n    (19): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5520273571079629,
            0.734733756717147,
            0.7391304347826086,
            0.7508549096238397,
            0.7640449438202247,
            0.7591597459697118,
            0.7835857352222765,
            0.7938446507083536,
            0.8124084025403029,
            0.8172936003908158,
            0.8280410356619443,
            0.8451392281387397,
            0.8593063019052272,
            0.877381533952125,
            0.8886174890083048,
            0.9052271617000488,
            0.925256472887152,
            0.9306301905227161,
            0.9570102589154861,
            0.9643380556912555,
            0.9765510503175379,
            0.9780166096726918,
            0.9755740107474352,
            0.9843673668783586,
            0.9965803615046409
        ],
        "test_acc": [
            0.6836734693877551,
            0.7180451127819549,
            0.723952738990333,
            0.7228786251342643,
            0.7320085929108485,
            0.7357679914070892,
            0.7368421052631579,
            0.7411385606874329,
            0.7250268528464017,
            0.7373791621911923,
            0.7336197636949516,
            0.7363050483351236,
            0.7325456498388829,
            0.6992481203007519,
            0.7336197636949516,
            0.723952738990333,
            0.7298603651987111,
            0.7303974221267454,
            0.7255639097744361,
            0.715359828141783,
            0.7110633727175081,
            0.7110633727175081,
            0.7475832438238453,
            0.7175080558539205,
            0.7207303974221267
        ],
        "train_loss": [
            0.6763805262744427,
            0.5531899277120829,
            0.535179921425879,
            0.5215316154062748,
            0.4961147950962186,
            0.49471431970596313,
            0.4792272802442312,
            0.4456898430362344,
            0.41757154557853937,
            0.4174410719424486,
            0.3841965636238456,
            0.37255998980253935,
            0.33139300905168056,
            0.3015048513188958,
            0.2785456548444927,
            0.2396804210729897,
            0.17788502131588757,
            0.17918047192506492,
            0.11729372444096953,
            0.08746150956721976,
            0.06628462811931968,
            0.05930261328467168,
            0.07422185345785692,
            0.051059879711829126,
            0.015165658282057848
        ],
        "test_loss": [
            0.6016796539227168,
            0.5689104149738947,
            0.5606638958056768,
            0.5521883775790533,
            0.5695552180210749,
            0.552129324277242,
            0.5432100564241409,
            0.5369902809460958,
            0.5794789145390192,
            0.5830390870571136,
            0.5637386952837308,
            0.588235029578209,
            0.6183654149373372,
            0.7148876299460729,
            0.7219787408908208,
            0.7224979157249133,
            1.0183439473311107,
            0.9118478034933408,
            1.5019766946633657,
            2.2286836644013723,
            2.2174420168002444,
            2.2479206156296034,
            2.4183669688800973,
            2.5439976786573726,
            3.8569689077014724
        ],
        "epochs": 25,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    }
]
[
    {
        "model_name": "BaseCNN",
        "description": "Baseline_BaseCNN",
        "timestamp": "2024-09-26 10:53:18.591774",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6311675622862726,
            0.743038593063019,
            0.7640449438202247,
            0.7879824132877381,
            0.782608695652174,
            0.8128969223253542,
            0.8231558378114313,
            0.8299951148021495,
            0.8348803126526624,
            0.8602833414753297,
            0.8607718612603811,
            0.8832437713727406,
            0.8949682462139716,
            0.9184171958964338,
            0.9149975574010747,
            0.9311187103077675,
            0.9242794333170493,
            0.945285784074255,
            0.925256472887152,
            0.9413776257938447
        ],
        "test_acc": [
            0.6949516648764769,
            0.7126745435016112,
            0.7330827067669173,
            0.7330827067669173,
            0.757250268528464,
            0.7497314715359829,
            0.7363050483351236,
            0.715359828141783,
            0.7701396348012889,
            0.7556390977443609,
            0.7610096670247046,
            0.761546723952739,
            0.7454350161117078,
            0.7593984962406015,
            0.7454350161117078,
            0.751342642320086,
            0.7422126745435016,
            0.7470461868958109,
            0.7357679914070892,
            0.7481203007518797
        ],
        "train_loss": [
            0.6371504068374634,
            0.5257551530376077,
            0.493264582939446,
            0.46808653231710196,
            0.46441977843642235,
            0.4206670541316271,
            0.3963014604523778,
            0.38869170285761356,
            0.3653114130720496,
            0.32970470702275634,
            0.315480119548738,
            0.286178074311465,
            0.26052623707801104,
            0.22607303131371737,
            0.2183029679581523,
            0.19558952562510967,
            0.19988754042424262,
            0.1637480773497373,
            0.1863928318489343,
            0.15632917243056
        ],
        "test_loss": [
            0.5843508025010427,
            0.5902446289857228,
            0.5325202733278275,
            0.5437297075986862,
            0.5172309954961141,
            0.522436281045278,
            0.5604474271337191,
            0.6512772108117739,
            0.5199254552523295,
            0.546902534365654,
            0.559148146212101,
            0.5654988795518875,
            0.5803451210260391,
            0.6025301933288574,
            0.6022642572720845,
            0.6682870010534923,
            0.6329333881537119,
            0.705746342241764,
            0.7665513381361961,
            0.686604380607605
        ],
        "epochs": 20,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "Baseline_BaseCNN",
        "timestamp": "2024-09-26 11:00:35.726547",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.558866634098681,
            0.6389838788470933,
            0.6746458231558378,
            0.7005373717635565,
            0.706399609184172,
            0.7254518808011724,
            0.7337567171470445,
            0.7552515876893015,
            0.7523204689789936,
            0.7596482657547631,
            0.7684416218856863,
            0.7659990229604299,
            0.7738153395212506,
            0.782608695652174,
            0.7757694186614558,
            0.7850512945774304,
            0.7840742550073277,
            0.7806546165119688,
            0.7879824132877381,
            0.794333170493405
        ],
        "test_acc": [
            0.5773361976369495,
            0.6450053705692803,
            0.6535982814178303,
            0.6815252416756176,
            0.706766917293233,
            0.7255639097744361,
            0.7352309344790547,
            0.7373791621911923,
            0.7416756176154672,
            0.7406015037593985,
            0.7368421052631579,
            0.7330827067669173,
            0.742749731471536,
            0.7465091299677766,
            0.7502685284640171,
            0.7508055853920516,
            0.7287862513426423,
            0.7352309344790547,
            0.7551020408163265,
            0.7443609022556391
        ],
        "train_loss": [
            0.6919810771942139,
            0.683006701990962,
            0.6658340413123369,
            0.6287366505712271,
            0.5847244318574667,
            0.5544441537931561,
            0.5338920801877975,
            0.519819812849164,
            0.5067286500707269,
            0.49908802565187216,
            0.49221652280539274,
            0.48652633279561996,
            0.4832525998353958,
            0.4782560095191002,
            0.4746725847944617,
            0.47014596685767174,
            0.47007175255566835,
            0.4679081467911601,
            0.46059306897222996,
            0.454631713218987
        ],
        "test_loss": [
            0.6897104442119598,
            0.6790757298469543,
            0.6583696643511454,
            0.6159140328566234,
            0.584700858592987,
            0.5697934140761693,
            0.5533163080612818,
            0.5440468599398931,
            0.5394930889209112,
            0.5417893598477046,
            0.5415757060050964,
            0.5447411189476649,
            0.5311202923456828,
            0.5285068601369858,
            0.5280277669429779,
            0.5259114762147268,
            0.5532946030298869,
            0.537464028596878,
            0.5182638605435689,
            0.5284231255451838
        ],
        "epochs": 20,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 1e-05
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "Baseline: BaseCNN",
        "timestamp": "2024-09-26 10:29:17.844502",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6595017098192477
        ],
        "test_acc": [
            0.7368421052631579
        ],
        "train_loss": [
            0.6523808958008885
        ],
        "test_loss": [
            0.5431669880946477
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "Baseline: BaseCNN",
        "timestamp": "2024-09-26 10:41:05.978729",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.668295065950171,
            0.7708842208109429,
            0.767953102100635,
            0.7806546165119688,
            0.7972642892037127,
            0.8119198827552516,
            0.835857352222765,
            0.8470933072789448,
            0.8676111382510991,
            0.9027845627747924,
            0.9081582804103566,
            0.9350268685881779,
            0.9570102589154861,
            0.9697117733268197,
            0.9521250610649731,
            0.9789936492427943,
            0.9912066438690766,
            0.9980459208597948,
            0.9990229604298974,
            0.9985344406448461
        ],
        "test_acc": [
            0.7357679914070892,
            0.7443609022556391,
            0.7395273899033298,
            0.719656283566058,
            0.7545649838882922,
            0.771750805585392,
            0.761546723952739,
            0.7577873254564984,
            0.7620837808807733,
            0.7540279269602578,
            0.7400644468313641,
            0.7620837808807733,
            0.7448979591836735,
            0.7352309344790547,
            0.7346938775510204,
            0.7121374865735768,
            0.7363050483351236,
            0.742749731471536,
            0.7406015037593985,
            0.734156820622986
        ],
        "train_loss": [
            0.6285863965749741,
            0.5019233282655478,
            0.48065741639584303,
            0.47644939832389355,
            0.4425694067031145,
            0.4157554470002651,
            0.38626024778932333,
            0.3447776264511049,
            0.29314167331904173,
            0.24642905639484525,
            0.24516380717977881,
            0.17703974642790854,
            0.11775808141101152,
            0.09323153016157448,
            0.12342115433420986,
            0.061526799865532666,
            0.028249522525584325,
            0.011972991727816407,
            0.008093987855318119,
            0.005054079183537397
        ],
        "test_loss": [
            0.5457185328006744,
            0.5490644325812658,
            0.5277692923943201,
            0.5998962253332139,
            0.5288185427586237,
            0.5102831761042277,
            0.5376126646995545,
            0.5671887045105298,
            0.6136883387962977,
            0.6163937111695608,
            0.6319839586814244,
            0.936015522480011,
            0.9662314822276433,
            1.2090577324231466,
            1.265764456987381,
            1.378798700372378,
            2.0537025074164075,
            2.4119240760803224,
            2.7929965794086455,
            2.7226371745268505
        ],
        "epochs": 20,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_Rotation_BaseCNN",
        "timestamp": "2024-09-26 12:16:05.399799",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6340986809965804
        ],
        "test_acc": [
            0.7309344790547798
        ],
        "train_loss": [
            0.6289477162063122
        ],
        "test_loss": [
            0.553363033135732
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomRotation(degrees=[-30.0, 30.0], interpolation=nearest, expand=False, fill=0)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_HorizontalFlip_BaseCNN",
        "timestamp": "2024-09-26 12:11:01.471281",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6482657547630679
        ],
        "test_acc": [
            0.7244897959183674
        ],
        "train_loss": [
            0.6254107747226954
        ],
        "test_loss": [
            0.5635334551334381
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_VerticalFlip_DropoutCNN",
        "timestamp": "2024-09-26 12:11:53.131397",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6380068392769908
        ],
        "test_acc": [
            0.719656283566058
        ],
        "train_loss": [
            0.6379365175962448
        ],
        "test_loss": [
            0.5682445218165716
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomVerticalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_HorizontalFlip_DropoutCNN",
        "timestamp": "2024-09-26 12:15:13.096146",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6765999022960429
        ],
        "test_acc": [
            0.719656283566058
        ],
        "train_loss": [
            0.6179544609040022
        ],
        "test_loss": [
            0.5708568235238393
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_Rotation_BaseCNN",
        "timestamp": "2024-09-26 12:09:19.269608",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6389838788470933
        ],
        "test_acc": [
            0.7158968850698174
        ],
        "train_loss": [
            0.6334298122674227
        ],
        "test_loss": [
            0.5770277510086695
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomRotation(degrees=[-30.0, 30.0], interpolation=nearest, expand=False, fill=0)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_GaussianBlur_BaseCNN",
        "timestamp": "2024-09-26 12:17:58.577332",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6619443087445042
        ],
        "test_acc": [
            0.7148227712137487
        ],
        "train_loss": [
            0.6231673192232847
        ],
        "test_loss": [
            0.5782933354377746
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    GaussianBlur(kernel_size=(9, 9), sigma=(0.1, 2.0))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_HorizontalFlip_DropoutCNN",
        "timestamp": "2024-09-26 12:05:58.658433",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6507083536883244
        ],
        "test_acc": [
            0.7137486573576799
        ],
        "train_loss": [
            0.6464963546022773
        ],
        "test_loss": [
            0.5993007858594258
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_Rotation_BaseCNN",
        "timestamp": "2024-09-26 12:12:09.894713",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.63019052271617
        ],
        "test_acc": [
            0.7132116004296455
        ],
        "train_loss": [
            0.6411681333556771
        ],
        "test_loss": [
            0.5790475100278855
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomRotation(degrees=[-30.0, 30.0], interpolation=nearest, expand=False, fill=0)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_VerticalFlip_BaseCNN",
        "timestamp": "2024-09-26 12:15:30.275216",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.651685393258427
        ],
        "test_acc": [
            0.7121374865735768
        ],
        "train_loss": [
            0.6362082725390792
        ],
        "test_loss": [
            0.5784870247046153
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomVerticalFlip(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_HorizontalFlip_BaseCNN",
        "timestamp": "2024-09-26 12:14:55.074035",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.618466047874939
        ],
        "test_acc": [
            0.709452201933405
        ],
        "train_loss": [
            0.647916816174984
        ],
        "test_loss": [
            0.5874062597751617
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_VerticalFlip_DropoutCNN",
        "timestamp": "2024-09-26 12:15:48.333329",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6126038104543234
        ],
        "test_acc": [
            0.7078410311493019
        ],
        "train_loss": [
            0.6494289673864841
        ],
        "test_loss": [
            0.5834525714317957
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomVerticalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_VerticalFlip_DropoutCNN",
        "timestamp": "2024-09-26 12:09:02.495060",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6321446018563752
        ],
        "test_acc": [
            0.7062298603651987
        ],
        "train_loss": [
            0.6589573938399553
        ],
        "test_loss": [
            0.5938035756349563
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomVerticalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_Rotation_DropoutCNN",
        "timestamp": "2024-09-26 12:09:37.225623",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6091841719589643
        ],
        "test_acc": [
            0.7056928034371643
        ],
        "train_loss": [
            0.6521413698792458
        ],
        "test_loss": [
            0.586578921477
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomRotation(degrees=[-30.0, 30.0], interpolation=nearest, expand=False, fill=0)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_RandomErasing_DropoutCNN",
        "timestamp": "2024-09-26 12:18:52.838046",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6487542745481192
        ],
        "test_acc": [
            0.7056928034371643
        ],
        "train_loss": [
            0.6316742580384016
        ],
        "test_loss": [
            0.6005407760540644
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_VerticalFlip_BaseCNN",
        "timestamp": "2024-09-26 12:08:44.482035",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6321446018563752
        ],
        "test_acc": [
            0.7046186895810956
        ],
        "train_loss": [
            0.6366518270224333
        ],
        "test_loss": [
            0.5940567920605342
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomVerticalFlip(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_VerticalFlip_BaseCNN",
        "timestamp": "2024-09-26 12:11:35.396735",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6257938446507083
        ],
        "test_acc": [
            0.7019334049409237
        ],
        "train_loss": [
            0.6408641785383224
        ],
        "test_loss": [
            0.5825865983963012
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomVerticalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_HorizontalFlip_DropoutCNN",
        "timestamp": "2024-09-26 12:08:27.462350",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6091841719589643
        ],
        "test_acc": [
            0.6992481203007519
        ],
        "train_loss": [
            0.6494657937437296
        ],
        "test_loss": [
            0.6000402003526688
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_Perspective_DropoutCNN",
        "timestamp": "2024-09-26 12:16:59.092702",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6106497313141183
        ],
        "test_acc": [
            0.6992481203007519
        ],
        "train_loss": [
            0.6536390464752913
        ],
        "test_loss": [
            0.5903022646903991
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomPerspective(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_GaussianBlur_DropoutCNN",
        "timestamp": "2024-09-26 12:18:17.328966",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6546165119687347
        ],
        "test_acc": [
            0.6981740064446831
        ],
        "train_loss": [
            0.6329390350729227
        ],
        "test_loss": [
            0.5727082928021748
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    GaussianBlur(kernel_size=(9, 9), sigma=(0.1, 2.0))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_Perspective_DropoutCNN",
        "timestamp": "2024-09-26 12:13:02.406322",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6121152906692721
        ],
        "test_acc": [
            0.6944146079484426
        ],
        "train_loss": [
            0.6654003169387579
        ],
        "test_loss": [
            0.613857826590538
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomPerspective(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_Rotation_DropoutCNN",
        "timestamp": "2024-09-26 12:12:27.921065",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6433805569125549
        ],
        "test_acc": [
            0.6917293233082706
        ],
        "train_loss": [
            0.6276288218796253
        ],
        "test_loss": [
            0.6140206108490626
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomRotation(degrees=[-30.0, 30.0], interpolation=nearest, expand=False, fill=0)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_Rotation_DropoutCNN",
        "timestamp": "2024-09-26 12:16:23.718577",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5959941377625794
        ],
        "test_acc": [
            0.6917293233082706
        ],
        "train_loss": [
            0.653790544718504
        ],
        "test_loss": [
            0.5953132768472036
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomRotation(degrees=[-30.0, 30.0], interpolation=nearest, expand=False, fill=0)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "Baseline: BaseCNN",
        "timestamp": "2024-09-26 10:26:09.334118",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6013678553981436
        ],
        "test_acc": [
            0.6890440386680988
        ],
        "train_loss": [
            0.6621518265455961
        ],
        "test_loss": [
            0.578543746471405
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.0001
            }
        },
        "transform": "None"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_HorizontalFlip_BaseCNN",
        "timestamp": "2024-09-26 12:05:41.210240",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6345872007816317
        ],
        "test_acc": [
            0.6879699248120301
        ],
        "train_loss": [
            0.6334009692072868
        ],
        "test_loss": [
            0.6287866622209549
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_HorizontalFlip_DropoutCNN",
        "timestamp": "2024-09-26 12:11:18.993220",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6394723986321446
        ],
        "test_acc": [
            0.6847475832438239
        ],
        "train_loss": [
            0.6432779375463724
        ],
        "test_loss": [
            0.6355276018381119
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_RandomErasing_BaseCNN",
        "timestamp": "2024-09-26 12:18:34.515182",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5749877870053737
        ],
        "test_acc": [
            0.6825993555316864
        ],
        "train_loss": [
            0.6682250872254372
        ],
        "test_loss": [
            0.5987413277228674
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_Perspective_BaseCNN",
        "timestamp": "2024-09-26 12:16:40.499241",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6394723986321446
        ],
        "test_acc": [
            0.6552094522019334
        ],
        "train_loss": [
            0.646964780986309
        ],
        "test_loss": [
            0.671813381711642
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomPerspective(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_Perspective_BaseCNN",
        "timestamp": "2024-09-26 12:12:44.600961",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5955056179775281
        ],
        "test_acc": [
            0.6460794844253491
        ],
        "train_loss": [
            0.6572910007089376
        ],
        "test_loss": [
            0.6626640518506368
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomPerspective(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_HorizontalFlip_BaseCNN",
        "timestamp": "2024-09-26 12:08:10.067018",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.6399609184171959
        ],
        "test_acc": [
            0.644468313641246
        ],
        "train_loss": [
            0.6433133352547884
        ],
        "test_loss": [
            0.6280625273784002
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n    RandomHorizontalFlip(p=0.5)\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_ColorJitter_BaseCNN",
        "timestamp": "2024-09-26 12:13:21.970115",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5759648265754763
        ],
        "test_acc": [
            0.6122448979591837
        ],
        "train_loss": [
            0.6823955588042736
        ],
        "test_loss": [
            0.6690504809220632
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    ColorJitter(brightness=(0.5, 1.5), contrast=(0.5, 1.5), saturation=(0.5, 1.5), hue=(-0.5, 0.5))\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_ColorJitter_DropoutCNN",
        "timestamp": "2024-09-26 12:17:40.564233",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5407914020517831
        ],
        "test_acc": [
            0.5784103114930182
        ],
        "train_loss": [
            0.6842605974525213
        ],
        "test_loss": [
            0.6814177970091502
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    ColorJitter(brightness=(0.5, 1.5), contrast=(0.5, 1.5), saturation=(0.5, 1.5), hue=(-0.5, 0.5))\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "BaseCNN",
        "description": "DataAugmentationExp_ColorJitter_BaseCNN",
        "timestamp": "2024-09-26 12:17:19.712177",
        "model": "BaseCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU()\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU()\n    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5192965315095261
        ],
        "test_acc": [
            0.5520945220193341
        ],
        "train_loss": [
            0.6901165768504143
        ],
        "test_loss": [
            0.6770113964875539
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    ColorJitter(brightness=(0.5, 1.5), contrast=(0.5, 1.5), saturation=(0.5, 1.5), hue=(-0.5, 0.5))\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    },
    {
        "model_name": "DropoutCNN",
        "description": "DataAugmentationExp_ColorJitter_DropoutCNN",
        "timestamp": "2024-09-26 12:13:41.686319",
        "model": "DropoutCNN(\n  (convolutional): Sequential(\n    (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): Dropout2d(p=0.05, inplace=False)\n    (2): ReLU()\n    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (5): Dropout2d(p=0.05, inplace=False)\n    (6): ReLU()\n    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): Dropout2d(p=0.05, inplace=False)\n    (10): ReLU()\n    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (12): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): Dropout2d(p=0.05, inplace=False)\n    (14): ReLU()\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (fully_connected): Sequential(\n    (0): Linear(in_features=65536, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)",
        "train_acc": [
            0.5046409379579873
        ],
        "test_acc": [
            0.4865735767991407
        ],
        "train_loss": [
            0.6968747172504663
        ],
        "test_loss": [
            0.6928935567537944
        ],
        "epochs": 1,
        "optimizer_config": {
            "optimizer": "<class 'torch.optim.adam.Adam'>",
            "params": {
                "lr": 0.0001
            }
        },
        "transform": "Compose(\n    Resize(size=(256, 256), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    ColorJitter(brightness=(0.5, 1.5), contrast=(0.5, 1.5), saturation=(0.5, 1.5), hue=(-0.5, 0.5))\n    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n)"
    }
]